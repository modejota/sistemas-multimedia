package practicafinal;

import SM.JAGG.Events.LienzoEvent;
import SM.JAGG.Events.LienzoListener;
import SM.JAGG.Graficos.MisAtributosBorde;
import SM.JAGG.Graficos.MisAtributosRelleno;
import SM.JAGG.Graficos.MisOtrosAtributos;
import SM.JAGG.IU.ColorCellRender;
import java.awt.Color;
import java.io.File;
import javax.swing.JFileChooser;
import SM.JAGG.IU.Lienzo2D;
import SM.JAGG.Imagen.MiLookupOp;
import SM.JAGG.Imagen.MiOperatorOp;
import SM.JAGG.Imagen.PosterizarOp;
import SM.JAGG.Imagen.RedOp;
import SM.JAGG.Imagen.TintadoAutoOp;
import java.awt.Point;
import java.awt.Transparency;
import java.awt.color.ColorSpace;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BandCombineOp;
import java.awt.image.BufferedImage;
import java.awt.image.ByteLookupTable;
import java.awt.image.ColorConvertOp;
import java.awt.image.ColorModel;
import java.awt.image.ComponentColorModel;
import java.awt.image.ConvolveOp;
import java.awt.image.DataBuffer;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.LookupTable;
import java.awt.image.RescaleOp;
import java.awt.image.WritableRaster;
import java.io.IOException;
import static java.lang.Thread.sleep;
import javax.activation.UnsupportedDataTypeException;
import javax.imageio.ImageIO;
import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.LineEvent;
import javax.sound.sampled.LineListener;
import javax.swing.JColorChooser;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import sm.image.EqualizationOp;
import sm.image.KernelProducer;
import sm.image.LookupTableProducer;
import sm.image.SepiaOp;
import sm.image.TintOp;
import sm.sound.SMClipPlayer;
import sm.sound.SMSoundRecorder;
import uk.co.caprica.vlcj.player.MediaPlayer;
import uk.co.caprica.vlcj.player.MediaPlayerEventAdapter;

/**
 * Clase que representa la ventana principal de nuestra aplicación
 * @author José Alberto Gómez García modej@correo.ugr.es
 */
public class VentanaPrincipal extends javax.swing.JFrame {

    ManejadorVentanaInterna mVentanaInterna;
    ManejadorVentanaInternaVideo mVentanaVideo;
    ManejadorRaton mRaton;
    ManejadorLienzo mLienzo;
    ManejadorVideo mVideo;
    private BufferedImage imgFuente;
    private SMClipPlayer player = null;
    private SMSoundRecorder recorder = null;

    /**
     * Creates new form VentanaPrincipal. Constructor por defecto
     */
    public VentanaPrincipal() {
        initComponents();
        this.setTitle("Prácticas - Sistemas Multimedia - José Alberto Gómez García");
        mVentanaInterna = new ManejadorVentanaInterna();
        mVentanaVideo = new ManejadorVentanaInternaVideo();
        mRaton = new ManejadorRaton();
        mLienzo = new ManejadorLienzo();
        mVideo = new ManejadorVideo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grupoHerramientasDibujo = new javax.swing.ButtonGroup();
        panelCentral = new javax.swing.JPanel();
        zonaEscritorio = new javax.swing.JDesktopPane();
        panelInferior = new javax.swing.JPanel();
        panelBarraHerramientasInferior = new javax.swing.JPanel();
        barraHerramientasInferior = new javax.swing.JToolBar();
        jLabel1 = new javax.swing.JLabel();
        sliderBrillo = new javax.swing.JSlider();
        jLabel2 = new javax.swing.JLabel();
        botonContrasteNormal = new javax.swing.JButton();
        botonContrasteIluminar = new javax.swing.JButton();
        botonContrasteOscurecido = new javax.swing.JButton();
        botonNegativo = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JToolBar.Separator();
        comboboxFiltros = new javax.swing.JComboBox<>();
        jSeparator5 = new javax.swing.JToolBar.Separator();
        boton90grados = new javax.swing.JButton();
        boton180grados = new javax.swing.JButton();
        boton270grados = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        sliderRotacion = new javax.swing.JSlider();
        jLabel4 = new javax.swing.JLabel();
        botonZoomIN = new javax.swing.JButton();
        botonZoomOUT = new javax.swing.JButton();
        jSeparator6 = new javax.swing.JToolBar.Separator();
        jLabel5 = new javax.swing.JLabel();
        sliderCuadratica = new javax.swing.JSlider();
        jLabel6 = new javax.swing.JLabel();
        botonBandas = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        sliderTintado = new javax.swing.JSlider();
        jLabel8 = new javax.swing.JLabel();
        botonSepia = new javax.swing.JButton();
        botonEcualizar = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        sliderLookupPropio = new javax.swing.JSlider();
        jLabel16 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        sliderPosterizar = new javax.swing.JSlider();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        sliderRojos = new javax.swing.JSlider();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        sliderPsicodelico = new javax.swing.JSlider();
        jLabel14 = new javax.swing.JLabel();
        jSeparator7 = new javax.swing.JToolBar.Separator();
        botonExtraerBandas = new javax.swing.JButton();
        comboboxEspaciosColor = new javax.swing.JComboBox<>();
        panelBarraEstadoCoordenadas = new javax.swing.JPanel();
        barraCoordenadas = new javax.swing.JLabel();
        barraEstado = new javax.swing.JLabel();
        panelHerramientasSuperior = new javax.swing.JPanel();
        barraHerramientas = new javax.swing.JToolBar();
        botonNuevo = new javax.swing.JButton();
        botonAbrir = new javax.swing.JButton();
        botonGuardar = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        switchLinea = new javax.swing.JToggleButton();
        switchRectangulo = new javax.swing.JToggleButton();
        switchElipse = new javax.swing.JToggleButton();
        switchCurva = new javax.swing.JToggleButton();
        switchLapiz = new javax.swing.JToggleButton();
        switchEdicion = new javax.swing.JToggleButton();
        switchVolcado = new javax.swing.JToggleButton();
        switchEfectoVentana = new javax.swing.JToggleButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        Color colores[] = {Color.BLACK, Color.WHITE, Color.RED, Color.BLUE, Color.GREEN, Color.YELLOW};
        comboboxColorBorde = new javax.swing.JComboBox<>(colores);
        selectorColoresBorde = new javax.swing.JButton();
        comboboxColorRelleno =  new javax.swing.JComboBox<>(colores);
        selectorColoresRelleno = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        spinnerGrosor = new javax.swing.JSpinner();
        switchRelleno = new javax.swing.JToggleButton();
        switchDegradado = new javax.swing.JToggleButton();
        comboboxDegradado = new javax.swing.JComboBox<>();
        switchTransparencia = new javax.swing.JToggleButton();
        sliderTransparencia = new javax.swing.JSlider();
        switchAlisar = new javax.swing.JToggleButton();
        switchDiscontinuidad = new javax.swing.JToggleButton();
        jSeparator8 = new javax.swing.JToolBar.Separator();
        botonReproducir = new javax.swing.JButton();
        botonDetener = new javax.swing.JButton();
        listaReproduccionAudio = new javax.swing.JComboBox<>();
        etiquetaDuracionAudio = new javax.swing.JLabel();
        etiquetaDe = new javax.swing.JLabel();
        etiquetaDuracionTotalAudio = new javax.swing.JLabel();
        jSeparator9 = new javax.swing.JToolBar.Separator();
        botonGrabarAudio = new javax.swing.JButton();
        etiquetaGrabacionAudio = new javax.swing.JLabel();
        jSeparator10 = new javax.swing.JToolBar.Separator();
        botonWebcam = new javax.swing.JButton();
        botonCapturarFrame = new javax.swing.JButton();
        barraSuperior = new javax.swing.JMenuBar();
        menuArchivo = new javax.swing.JMenu();
        opcionNuevo = new javax.swing.JMenuItem();
        opcionAbrir = new javax.swing.JMenuItem();
        opcionGuardar = new javax.swing.JMenuItem();
        opcionDuplicar = new javax.swing.JMenuItem();
        separadorSubmenuArchivo = new javax.swing.JPopupMenu.Separator();
        submenuImprimir = new javax.swing.JMenu();
        opcionImpresora = new javax.swing.JMenuItem();
        opcionFichero = new javax.swing.JMenuItem();
        separador2SubmenuArchivo = new javax.swing.JPopupMenu.Separator();
        opcionSalir = new javax.swing.JMenuItem();
        submenuVer = new javax.swing.JMenu();
        checkboxBarraEstado = new javax.swing.JCheckBoxMenuItem();
        menuImagen = new javax.swing.JMenu();
        opcionUnicoVolcado = new javax.swing.JMenuItem();
        opcionEnverdecer = new javax.swing.JMenuItem();
        opcionAutoTintado = new javax.swing.JMenuItem();
        opcionLookupIluminar = new javax.swing.JMenuItem();
        menuAyuda = new javax.swing.JMenu();
        opcionAcercaDe = new javax.swing.JMenuItem();

        FormListener formListener = new FormListener();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panelCentral.setLayout(new java.awt.BorderLayout());

        zonaEscritorio.setPreferredSize(new java.awt.Dimension(2770, 750));

        javax.swing.GroupLayout zonaEscritorioLayout = new javax.swing.GroupLayout(zonaEscritorio);
        zonaEscritorio.setLayout(zonaEscritorioLayout);
        zonaEscritorioLayout.setHorizontalGroup(
            zonaEscritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 2770, Short.MAX_VALUE)
        );
        zonaEscritorioLayout.setVerticalGroup(
            zonaEscritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        panelCentral.add(zonaEscritorio, java.awt.BorderLayout.CENTER);

        getContentPane().add(panelCentral, java.awt.BorderLayout.CENTER);

        panelInferior.setLayout(new java.awt.BorderLayout());

        panelBarraHerramientasInferior.setLayout(new java.awt.BorderLayout());

        barraHerramientasInferior.setRollover(true);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/baseline_brightness_low_black_24dp.png"))); // NOI18N
        barraHerramientasInferior.add(jLabel1);

        sliderBrillo.setMaximum(255);
        sliderBrillo.setMinimum(-255);
        sliderBrillo.setToolTipText("Brillo");
        sliderBrillo.setValue(0);
        sliderBrillo.setPreferredSize(new java.awt.Dimension(100, 15));
        sliderBrillo.addChangeListener(formListener);
        sliderBrillo.addFocusListener(formListener);
        barraHerramientasInferior.add(sliderBrillo);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/baseline_brightness_7_black_24dp.png"))); // NOI18N
        barraHerramientasInferior.add(jLabel2);

        botonContrasteNormal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/contraste.png"))); // NOI18N
        botonContrasteNormal.setToolTipText("Contraste normal");
        botonContrasteNormal.setFocusable(false);
        botonContrasteNormal.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonContrasteNormal.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonContrasteNormal.addActionListener(formListener);
        barraHerramientasInferior.add(botonContrasteNormal);

        botonContrasteIluminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/iluminar.png"))); // NOI18N
        botonContrasteIluminar.setToolTipText("Contraste iluminado");
        botonContrasteIluminar.setFocusable(false);
        botonContrasteIluminar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonContrasteIluminar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonContrasteIluminar.addActionListener(formListener);
        barraHerramientasInferior.add(botonContrasteIluminar);

        botonContrasteOscurecido.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/oscurecer.png"))); // NOI18N
        botonContrasteOscurecido.setToolTipText("Contraste oscurecido");
        botonContrasteOscurecido.setFocusable(false);
        botonContrasteOscurecido.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonContrasteOscurecido.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonContrasteOscurecido.addActionListener(formListener);
        barraHerramientasInferior.add(botonContrasteOscurecido);

        botonNegativo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/negativo-small.png"))); // NOI18N
        botonNegativo.setToolTipText("Negativo");
        botonNegativo.setFocusable(false);
        botonNegativo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonNegativo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonNegativo.addActionListener(formListener);
        barraHerramientasInferior.add(botonNegativo);
        barraHerramientasInferior.add(jSeparator4);

        comboboxFiltros.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Suavizado medio", "Suavizado binomial", "Enfoque", "Relieve", "Fronteras de Laplace", "Suavizado horizontal", "Suavizado diagonal", "Gaussiano", "Mi prueba de filtro" }));
        comboboxFiltros.setToolTipText("Filtros");
        comboboxFiltros.addActionListener(formListener);
        barraHerramientasInferior.add(comboboxFiltros);
        barraHerramientasInferior.add(jSeparator5);

        boton90grados.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/rotacion90.png"))); // NOI18N
        boton90grados.setToolTipText("Rotar 90º");
        boton90grados.setFocusable(false);
        boton90grados.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        boton90grados.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        boton90grados.addActionListener(formListener);
        barraHerramientasInferior.add(boton90grados);

        boton180grados.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/rotacion180.png"))); // NOI18N
        boton180grados.setToolTipText("Rotar 180º");
        boton180grados.setFocusable(false);
        boton180grados.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        boton180grados.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        boton180grados.addActionListener(formListener);
        barraHerramientasInferior.add(boton180grados);

        boton270grados.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/rotacion270.png"))); // NOI18N
        boton270grados.setToolTipText("Rotar 270º");
        boton270grados.setFocusable(false);
        boton270grados.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        boton270grados.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        boton270grados.addActionListener(formListener);
        barraHerramientasInferior.add(boton270grados);

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/0grados.png"))); // NOI18N
        barraHerramientasInferior.add(jLabel3);

        sliderRotacion.setMaximum(360);
        sliderRotacion.setMinorTickSpacing(90);
        sliderRotacion.setToolTipText("Angulo de giro");
        sliderRotacion.setValue(0);
        sliderRotacion.setPreferredSize(new java.awt.Dimension(100, 15));
        sliderRotacion.addChangeListener(formListener);
        sliderRotacion.addFocusListener(formListener);
        barraHerramientasInferior.add(sliderRotacion);

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/360grados.png"))); // NOI18N
        barraHerramientasInferior.add(jLabel4);

        botonZoomIN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/baseline_zoom_in_black_24dp.png"))); // NOI18N
        botonZoomIN.setToolTipText("Zoom In");
        botonZoomIN.setFocusable(false);
        botonZoomIN.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonZoomIN.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonZoomIN.addActionListener(formListener);
        barraHerramientasInferior.add(botonZoomIN);

        botonZoomOUT.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/baseline_zoom_out_black_24dp.png"))); // NOI18N
        botonZoomOUT.setToolTipText("Zoom Out");
        botonZoomOUT.setFocusable(false);
        botonZoomOUT.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonZoomOUT.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonZoomOUT.addActionListener(formListener);
        barraHerramientasInferior.add(botonZoomOUT);
        barraHerramientasInferior.add(jSeparator6);

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/cuadratica0.png"))); // NOI18N
        barraHerramientasInferior.add(jLabel5);

        sliderCuadratica.setMaximum(255);
        sliderCuadratica.setToolTipText("Parametro f. cuadrática");
        sliderCuadratica.setValue(128);
        sliderCuadratica.setPreferredSize(new java.awt.Dimension(100, 15));
        sliderCuadratica.addChangeListener(formListener);
        sliderCuadratica.addFocusListener(formListener);
        barraHerramientasInferior.add(sliderCuadratica);

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/cuadratica255.png"))); // NOI18N
        barraHerramientasInferior.add(jLabel6);

        botonBandas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/combinar.png"))); // NOI18N
        botonBandas.setToolTipText("Combinar bandas");
        botonBandas.setFocusable(false);
        botonBandas.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonBandas.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonBandas.addActionListener(formListener);
        barraHerramientasInferior.add(botonBandas);

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/tintar0.png"))); // NOI18N
        barraHerramientasInferior.add(jLabel7);

        sliderTintado.setToolTipText("Grado de tintado");
        sliderTintado.setValue(0);
        sliderTintado.setPreferredSize(new java.awt.Dimension(100, 15));
        sliderTintado.addChangeListener(formListener);
        sliderTintado.addFocusListener(formListener);
        barraHerramientasInferior.add(sliderTintado);

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/tintar1.png"))); // NOI18N
        barraHerramientasInferior.add(jLabel8);

        botonSepia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/sepia.png"))); // NOI18N
        botonSepia.setToolTipText("Sepia");
        botonSepia.setFocusable(false);
        botonSepia.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonSepia.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonSepia.addActionListener(formListener);
        barraHerramientasInferior.add(botonSepia);

        botonEcualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/baseline_equalizer_black_24dp.png"))); // NOI18N
        botonEcualizar.setToolTipText("Ecualizar");
        botonEcualizar.setFocusable(false);
        botonEcualizar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonEcualizar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonEcualizar.addActionListener(formListener);
        barraHerramientasInferior.add(botonEcualizar);

        jLabel15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/baseline_import_contacts_black_24dp.png"))); // NOI18N
        barraHerramientasInferior.add(jLabel15);

        sliderLookupPropio.setMaximum(200);
        sliderLookupPropio.setMinimum(25);
        sliderLookupPropio.setToolTipText("Lookup propio");
        sliderLookupPropio.setValue(128);
        sliderLookupPropio.setPreferredSize(new java.awt.Dimension(100, 15));
        sliderLookupPropio.addChangeListener(formListener);
        sliderLookupPropio.addFocusListener(formListener);
        barraHerramientasInferior.add(sliderLookupPropio);

        jLabel16.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/baseline_import_contacts_black_24dp.png"))); // NOI18N
        barraHerramientasInferior.add(jLabel16);

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/posterizar_min.png"))); // NOI18N
        barraHerramientasInferior.add(jLabel9);

        sliderPosterizar.setMaximum(20);
        sliderPosterizar.setMinimum(2);
        sliderPosterizar.setToolTipText("Posterizar");
        sliderPosterizar.setValue(10);
        sliderPosterizar.setPreferredSize(new java.awt.Dimension(100, 15));
        sliderPosterizar.addChangeListener(formListener);
        sliderPosterizar.addFocusListener(formListener);
        barraHerramientasInferior.add(sliderPosterizar);

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/posterizar_max.png"))); // NOI18N
        barraHerramientasInferior.add(jLabel10);

        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/resalte_rojo_min.png"))); // NOI18N
        barraHerramientasInferior.add(jLabel11);

        sliderRojos.setMaximum(255);
        sliderRojos.setToolTipText("Resalte de rojos");
        sliderRojos.setValue(0);
        sliderRojos.setPreferredSize(new java.awt.Dimension(100, 15));
        sliderRojos.addChangeListener(formListener);
        sliderRojos.addFocusListener(formListener);
        barraHerramientasInferior.add(sliderRojos);

        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/resalterojo_max.png"))); // NOI18N
        barraHerramientasInferior.add(jLabel12);

        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/pysco_min.png"))); // NOI18N
        barraHerramientasInferior.add(jLabel13);

        sliderPsicodelico.setMaximum(15);
        sliderPsicodelico.setMinimum(5);
        sliderPsicodelico.setToolTipText("Operador pixel a pixel propio");
        sliderPsicodelico.setValue(6);
        sliderPsicodelico.setPreferredSize(new java.awt.Dimension(100, 15));
        sliderPsicodelico.addChangeListener(formListener);
        sliderPsicodelico.addFocusListener(formListener);
        barraHerramientasInferior.add(sliderPsicodelico);

        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/pysco_max.png"))); // NOI18N
        barraHerramientasInferior.add(jLabel14);
        barraHerramientasInferior.add(jSeparator7);

        botonExtraerBandas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/bandas.png"))); // NOI18N
        botonExtraerBandas.setToolTipText("Extraer bandas");
        botonExtraerBandas.setFocusable(false);
        botonExtraerBandas.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonExtraerBandas.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonExtraerBandas.addActionListener(formListener);
        barraHerramientasInferior.add(botonExtraerBandas);

        comboboxEspaciosColor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "RGB", "YCC", "GREY", "YCbCr" }));
        comboboxEspaciosColor.setToolTipText("Espacios de color");
        comboboxEspaciosColor.addActionListener(formListener);
        barraHerramientasInferior.add(comboboxEspaciosColor);

        panelBarraHerramientasInferior.add(barraHerramientasInferior, java.awt.BorderLayout.CENTER);

        panelInferior.add(panelBarraHerramientasInferior, java.awt.BorderLayout.PAGE_START);

        panelBarraEstadoCoordenadas.setLayout(new java.awt.BorderLayout());

        barraCoordenadas.setText("(0,0)");
        barraCoordenadas.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panelBarraEstadoCoordenadas.add(barraCoordenadas, java.awt.BorderLayout.EAST);

        barraEstado.setText("Barra de estado");
        barraEstado.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        barraEstado.setMaximumSize(new java.awt.Dimension(77, 25));
        barraEstado.setPreferredSize(new java.awt.Dimension(77, 20));
        panelBarraEstadoCoordenadas.add(barraEstado, java.awt.BorderLayout.CENTER);

        panelInferior.add(panelBarraEstadoCoordenadas, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(panelInferior, java.awt.BorderLayout.PAGE_END);

        panelHerramientasSuperior.setLayout(new java.awt.BorderLayout());

        barraHerramientas.setRollover(true);

        botonNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/nuevo.png"))); // NOI18N
        botonNuevo.setToolTipText("Nueva ventana");
        botonNuevo.setFocusable(false);
        botonNuevo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonNuevo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonNuevo.addActionListener(formListener);
        barraHerramientas.add(botonNuevo);

        botonAbrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/abrir.png"))); // NOI18N
        botonAbrir.setToolTipText("Abrir imagen");
        botonAbrir.setFocusable(false);
        botonAbrir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonAbrir.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonAbrir.addActionListener(formListener);
        barraHerramientas.add(botonAbrir);

        botonGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/guardar.png"))); // NOI18N
        botonGuardar.setToolTipText("Guardar lienzo");
        botonGuardar.setFocusable(false);
        botonGuardar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonGuardar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonGuardar.addActionListener(formListener);
        barraHerramientas.add(botonGuardar);
        barraHerramientas.add(jSeparator1);

        grupoHerramientasDibujo.add(switchLinea);
        switchLinea.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/linea.png"))); // NOI18N
        switchLinea.setToolTipText("Dibujar línea");
        switchLinea.setFocusable(false);
        switchLinea.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        switchLinea.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        switchLinea.addActionListener(formListener);
        barraHerramientas.add(switchLinea);

        grupoHerramientasDibujo.add(switchRectangulo);
        switchRectangulo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/rectangulo.png"))); // NOI18N
        switchRectangulo.setToolTipText("Dibujar rectángulo");
        switchRectangulo.setFocusable(false);
        switchRectangulo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        switchRectangulo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        switchRectangulo.addActionListener(formListener);
        barraHerramientas.add(switchRectangulo);

        grupoHerramientasDibujo.add(switchElipse);
        switchElipse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/elipse.png"))); // NOI18N
        switchElipse.setToolTipText("Dibujar elipse");
        switchElipse.setFocusable(false);
        switchElipse.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        switchElipse.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        switchElipse.addActionListener(formListener);
        barraHerramientas.add(switchElipse);

        grupoHerramientasDibujo.add(switchCurva);
        switchCurva.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/outline_looks_black_24dp.png"))); // NOI18N
        switchCurva.setToolTipText("Dibujar curva");
        switchCurva.setFocusable(false);
        switchCurva.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        switchCurva.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        switchCurva.addActionListener(formListener);
        barraHerramientas.add(switchCurva);

        grupoHerramientasDibujo.add(switchLapiz);
        switchLapiz.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/outline_edit_black_24dp.png"))); // NOI18N
        switchLapiz.setToolTipText("Lápiz libre");
        switchLapiz.setFocusable(false);
        switchLapiz.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        switchLapiz.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        switchLapiz.addActionListener(formListener);
        barraHerramientas.add(switchLapiz);

        grupoHerramientasDibujo.add(switchEdicion);
        switchEdicion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/seleccion.png"))); // NOI18N
        switchEdicion.setToolTipText("Mover figuras");
        switchEdicion.setFocusable(false);
        switchEdicion.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        switchEdicion.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        switchEdicion.addActionListener(formListener);
        barraHerramientas.add(switchEdicion);

        switchVolcado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/volcado_fijo.png"))); // NOI18N
        switchVolcado.setToolTipText("Volcado");
        switchVolcado.setFocusable(false);
        switchVolcado.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        switchVolcado.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        switchVolcado.addActionListener(formListener);
        barraHerramientas.add(switchVolcado);

        switchEfectoVentana.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/efecto_ventana.png"))); // NOI18N
        switchEfectoVentana.setToolTipText("Efecto ventana");
        switchEfectoVentana.setFocusable(false);
        switchEfectoVentana.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        switchEfectoVentana.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        switchEfectoVentana.addActionListener(formListener);
        barraHerramientas.add(switchEfectoVentana);
        barraHerramientas.add(jSeparator2);

        comboboxColorBorde.setToolTipText("Color del borde");
        comboboxColorBorde.setPreferredSize(new java.awt.Dimension(55, 36));
        comboboxColorBorde.setRenderer(new ColorCellRender());
        comboboxColorBorde.addActionListener(formListener);
        barraHerramientas.add(comboboxColorBorde);

        selectorColoresBorde.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/baseline_palette_black_24dp.png"))); // NOI18N
        selectorColoresBorde.setToolTipText("Colores borde");
        selectorColoresBorde.setFocusable(false);
        selectorColoresBorde.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        selectorColoresBorde.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        selectorColoresBorde.addActionListener(formListener);
        barraHerramientas.add(selectorColoresBorde);

        comboboxColorRelleno.setToolTipText("Color del relleno");
        comboboxColorRelleno.setPreferredSize(new java.awt.Dimension(55, 36));
        comboboxColorRelleno.setRenderer(new ColorCellRender());
        comboboxColorRelleno.addActionListener(formListener);
        barraHerramientas.add(comboboxColorRelleno);

        selectorColoresRelleno.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/baseline_palette_black_24dp.png"))); // NOI18N
        selectorColoresRelleno.setToolTipText("Colores relleno");
        selectorColoresRelleno.setFocusable(false);
        selectorColoresRelleno.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        selectorColoresRelleno.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        selectorColoresRelleno.addActionListener(formListener);
        barraHerramientas.add(selectorColoresRelleno);
        barraHerramientas.add(jSeparator3);

        spinnerGrosor.setModel(new javax.swing.SpinnerNumberModel(2, 1, 9, 1));
        spinnerGrosor.setToolTipText("Grosor del trazo");
        spinnerGrosor.addChangeListener(formListener);
        barraHerramientas.add(spinnerGrosor);

        switchRelleno.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/rellenar.png"))); // NOI18N
        switchRelleno.setToolTipText("Rellenar figuras");
        switchRelleno.setFocusable(false);
        switchRelleno.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        switchRelleno.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        switchRelleno.addActionListener(formListener);
        barraHerramientas.add(switchRelleno);

        switchDegradado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/outline_texture_black_24dp.png"))); // NOI18N
        switchDegradado.setToolTipText("Degradado");
        switchDegradado.setFocusable(false);
        switchDegradado.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        switchDegradado.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        switchDegradado.addActionListener(formListener);
        barraHerramientas.add(switchDegradado);

        comboboxDegradado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Horizontal", "Vertical", "Diagonal" }));
        comboboxDegradado.setToolTipText("Orientación degradado");
        comboboxDegradado.addActionListener(formListener);
        barraHerramientas.add(comboboxDegradado);

        switchTransparencia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/transparencia.png"))); // NOI18N
        switchTransparencia.setToolTipText("Transparencia");
        switchTransparencia.setFocusable(false);
        switchTransparencia.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        switchTransparencia.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        switchTransparencia.addActionListener(formListener);
        barraHerramientas.add(switchTransparencia);

        sliderTransparencia.setToolTipText("Nivel de transparencia");
        sliderTransparencia.setPreferredSize(new java.awt.Dimension(50, 13));
        sliderTransparencia.addChangeListener(formListener);
        barraHerramientas.add(sliderTransparencia);

        switchAlisar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/alisar.png"))); // NOI18N
        switchAlisar.setToolTipText("Alisar figuras");
        switchAlisar.setFocusable(false);
        switchAlisar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        switchAlisar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        switchAlisar.addActionListener(formListener);
        barraHerramientas.add(switchAlisar);

        switchDiscontinuidad.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/outline_more_horiz_black_24dp.png"))); // NOI18N
        switchDiscontinuidad.setToolTipText("Tipo de borde");
        switchDiscontinuidad.setFocusable(false);
        switchDiscontinuidad.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        switchDiscontinuidad.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        switchDiscontinuidad.addActionListener(formListener);
        barraHerramientas.add(switchDiscontinuidad);
        barraHerramientas.add(jSeparator8);

        botonReproducir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/play24x24.png"))); // NOI18N
        botonReproducir.setToolTipText("Reproducir audio");
        botonReproducir.setFocusable(false);
        botonReproducir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonReproducir.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonReproducir.addActionListener(formListener);
        barraHerramientas.add(botonReproducir);

        botonDetener.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/stop24x24.png"))); // NOI18N
        botonDetener.setToolTipText("Detener audio");
        botonDetener.setFocusable(false);
        botonDetener.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonDetener.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonDetener.addActionListener(formListener);
        barraHerramientas.add(botonDetener);

        listaReproduccionAudio.setToolTipText("Lista reproducción de audio");
        barraHerramientas.add(listaReproduccionAudio);

        etiquetaDuracionAudio.setText("00:00");
        barraHerramientas.add(etiquetaDuracionAudio);

        etiquetaDe.setText(" de ");
        barraHerramientas.add(etiquetaDe);

        etiquetaDuracionTotalAudio.setText("00:00");
        barraHerramientas.add(etiquetaDuracionTotalAudio);
        barraHerramientas.add(jSeparator9);

        botonGrabarAudio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/record24x24.png"))); // NOI18N
        botonGrabarAudio.setToolTipText("Grabar audio");
        botonGrabarAudio.setFocusable(false);
        botonGrabarAudio.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonGrabarAudio.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonGrabarAudio.addActionListener(formListener);
        barraHerramientas.add(botonGrabarAudio);

        etiquetaGrabacionAudio.setText("00:00");
        barraHerramientas.add(etiquetaGrabacionAudio);
        barraHerramientas.add(jSeparator10);

        botonWebcam.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Camara.png"))); // NOI18N
        botonWebcam.setToolTipText("Webcam");
        botonWebcam.setFocusable(false);
        botonWebcam.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonWebcam.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonWebcam.addActionListener(formListener);
        barraHerramientas.add(botonWebcam);

        botonCapturarFrame.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Capturar.png"))); // NOI18N
        botonCapturarFrame.setToolTipText("Capturar frame");
        botonCapturarFrame.setFocusable(false);
        botonCapturarFrame.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonCapturarFrame.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonCapturarFrame.addActionListener(formListener);
        barraHerramientas.add(botonCapturarFrame);

        panelHerramientasSuperior.add(barraHerramientas, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(panelHerramientasSuperior, java.awt.BorderLayout.PAGE_START);

        barraSuperior.setToolTipText("Grosor del trazo");

        menuArchivo.setText("Archivo");

        opcionNuevo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        opcionNuevo.setText("Nuevo");
        opcionNuevo.addActionListener(formListener);
        menuArchivo.add(opcionNuevo);

        opcionAbrir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        opcionAbrir.setText("Abrir");
        opcionAbrir.addActionListener(formListener);
        menuArchivo.add(opcionAbrir);

        opcionGuardar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        opcionGuardar.setText("Guardar");
        opcionGuardar.addActionListener(formListener);
        menuArchivo.add(opcionGuardar);

        opcionDuplicar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        opcionDuplicar.setText("Duplicar");
        opcionDuplicar.addActionListener(formListener);
        menuArchivo.add(opcionDuplicar);
        menuArchivo.add(separadorSubmenuArchivo);

        submenuImprimir.setText("Imprimir");

        opcionImpresora.setText("Impresora");
        submenuImprimir.add(opcionImpresora);

        opcionFichero.setText("Fichero");
        submenuImprimir.add(opcionFichero);

        menuArchivo.add(submenuImprimir);
        menuArchivo.add(separador2SubmenuArchivo);

        opcionSalir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        opcionSalir.setText("Salir");
        opcionSalir.addActionListener(formListener);
        menuArchivo.add(opcionSalir);

        barraSuperior.add(menuArchivo);

        submenuVer.setText("Ver");
        submenuVer.addActionListener(formListener);

        checkboxBarraEstado.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        checkboxBarraEstado.setSelected(true);
        checkboxBarraEstado.setText("Barra de estado");
        checkboxBarraEstado.addActionListener(formListener);
        submenuVer.add(checkboxBarraEstado);

        barraSuperior.add(submenuVer);

        menuImagen.setText("Imagen");

        opcionUnicoVolcado.setText("Realizar un volcado");
        opcionUnicoVolcado.addActionListener(formListener);
        menuImagen.add(opcionUnicoVolcado);

        opcionEnverdecer.setText("Enverdecer mediante combinación de bandas");
        opcionEnverdecer.addActionListener(formListener);
        menuImagen.add(opcionEnverdecer);

        opcionAutoTintado.setText("Tintado con selección automática del umbral");
        opcionAutoTintado.addActionListener(formListener);
        menuImagen.add(opcionAutoTintado);

        opcionLookupIluminar.setText("Lookup iluminar zonas oscuras");
        opcionLookupIluminar.addActionListener(formListener);
        menuImagen.add(opcionLookupIluminar);

        barraSuperior.add(menuImagen);

        menuAyuda.setText("Ayuda");

        opcionAcercaDe.setText("Acerca de");
        opcionAcercaDe.addActionListener(formListener);
        menuAyuda.add(opcionAcercaDe);

        barraSuperior.add(menuAyuda);

        setJMenuBar(barraSuperior);

        pack();
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener, java.awt.event.FocusListener, javax.swing.event.ChangeListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == botonContrasteNormal) {
                VentanaPrincipal.this.botonContrasteNormalActionPerformed(evt);
            }
            else if (evt.getSource() == botonContrasteIluminar) {
                VentanaPrincipal.this.botonContrasteIluminarActionPerformed(evt);
            }
            else if (evt.getSource() == botonContrasteOscurecido) {
                VentanaPrincipal.this.botonContrasteOscurecidoActionPerformed(evt);
            }
            else if (evt.getSource() == botonNegativo) {
                VentanaPrincipal.this.botonNegativoActionPerformed(evt);
            }
            else if (evt.getSource() == comboboxFiltros) {
                VentanaPrincipal.this.comboboxFiltrosActionPerformed(evt);
            }
            else if (evt.getSource() == boton90grados) {
                VentanaPrincipal.this.boton90gradosActionPerformed(evt);
            }
            else if (evt.getSource() == boton180grados) {
                VentanaPrincipal.this.boton180gradosActionPerformed(evt);
            }
            else if (evt.getSource() == boton270grados) {
                VentanaPrincipal.this.boton270gradosActionPerformed(evt);
            }
            else if (evt.getSource() == botonZoomIN) {
                VentanaPrincipal.this.botonZoomINActionPerformed(evt);
            }
            else if (evt.getSource() == botonZoomOUT) {
                VentanaPrincipal.this.botonZoomOUTActionPerformed(evt);
            }
            else if (evt.getSource() == botonBandas) {
                VentanaPrincipal.this.botonBandasActionPerformed(evt);
            }
            else if (evt.getSource() == botonSepia) {
                VentanaPrincipal.this.botonSepiaActionPerformed(evt);
            }
            else if (evt.getSource() == botonEcualizar) {
                VentanaPrincipal.this.botonEcualizarActionPerformed(evt);
            }
            else if (evt.getSource() == botonExtraerBandas) {
                VentanaPrincipal.this.botonExtraerBandasActionPerformed(evt);
            }
            else if (evt.getSource() == comboboxEspaciosColor) {
                VentanaPrincipal.this.comboboxEspaciosColorActionPerformed(evt);
            }
            else if (evt.getSource() == botonNuevo) {
                VentanaPrincipal.this.botonNuevoActionPerformed(evt);
            }
            else if (evt.getSource() == botonAbrir) {
                VentanaPrincipal.this.botonAbrirActionPerformed(evt);
            }
            else if (evt.getSource() == botonGuardar) {
                VentanaPrincipal.this.botonGuardarActionPerformed(evt);
            }
            else if (evt.getSource() == switchLinea) {
                VentanaPrincipal.this.switchLineaActionPerformed(evt);
            }
            else if (evt.getSource() == switchRectangulo) {
                VentanaPrincipal.this.switchRectanguloActionPerformed(evt);
            }
            else if (evt.getSource() == switchElipse) {
                VentanaPrincipal.this.switchElipseActionPerformed(evt);
            }
            else if (evt.getSource() == switchCurva) {
                VentanaPrincipal.this.switchCurvaActionPerformed(evt);
            }
            else if (evt.getSource() == switchLapiz) {
                VentanaPrincipal.this.switchLapizActionPerformed(evt);
            }
            else if (evt.getSource() == switchEdicion) {
                VentanaPrincipal.this.switchEdicionActionPerformed(evt);
            }
            else if (evt.getSource() == switchVolcado) {
                VentanaPrincipal.this.switchVolcadoActionPerformed(evt);
            }
            else if (evt.getSource() == switchEfectoVentana) {
                VentanaPrincipal.this.switchEfectoVentanaActionPerformed(evt);
            }
            else if (evt.getSource() == comboboxColorBorde) {
                VentanaPrincipal.this.comboboxColorBordeActionPerformed(evt);
            }
            else if (evt.getSource() == selectorColoresBorde) {
                VentanaPrincipal.this.selectorColoresBordeActionPerformed(evt);
            }
            else if (evt.getSource() == comboboxColorRelleno) {
                VentanaPrincipal.this.comboboxColorRellenoActionPerformed(evt);
            }
            else if (evt.getSource() == selectorColoresRelleno) {
                VentanaPrincipal.this.selectorColoresRellenoActionPerformed(evt);
            }
            else if (evt.getSource() == switchRelleno) {
                VentanaPrincipal.this.switchRellenoActionPerformed(evt);
            }
            else if (evt.getSource() == switchDegradado) {
                VentanaPrincipal.this.switchDegradadoActionPerformed(evt);
            }
            else if (evt.getSource() == comboboxDegradado) {
                VentanaPrincipal.this.comboboxDegradadoActionPerformed(evt);
            }
            else if (evt.getSource() == switchTransparencia) {
                VentanaPrincipal.this.switchTransparenciaActionPerformed(evt);
            }
            else if (evt.getSource() == switchAlisar) {
                VentanaPrincipal.this.switchAlisarActionPerformed(evt);
            }
            else if (evt.getSource() == switchDiscontinuidad) {
                VentanaPrincipal.this.switchDiscontinuidadActionPerformed(evt);
            }
            else if (evt.getSource() == botonReproducir) {
                VentanaPrincipal.this.botonReproducirActionPerformed(evt);
            }
            else if (evt.getSource() == botonDetener) {
                VentanaPrincipal.this.botonDetenerActionPerformed(evt);
            }
            else if (evt.getSource() == botonGrabarAudio) {
                VentanaPrincipal.this.botonGrabarAudioActionPerformed(evt);
            }
            else if (evt.getSource() == botonWebcam) {
                VentanaPrincipal.this.botonWebcamActionPerformed(evt);
            }
            else if (evt.getSource() == botonCapturarFrame) {
                VentanaPrincipal.this.botonCapturarFrameActionPerformed(evt);
            }
            else if (evt.getSource() == opcionNuevo) {
                VentanaPrincipal.this.opcionNuevoActionPerformed(evt);
            }
            else if (evt.getSource() == opcionAbrir) {
                VentanaPrincipal.this.opcionAbrirActionPerformed(evt);
            }
            else if (evt.getSource() == opcionGuardar) {
                VentanaPrincipal.this.opcionGuardarActionPerformed(evt);
            }
            else if (evt.getSource() == opcionDuplicar) {
                VentanaPrincipal.this.opcionDuplicarActionPerformed(evt);
            }
            else if (evt.getSource() == opcionSalir) {
                VentanaPrincipal.this.opcionSalirActionPerformed(evt);
            }
            else if (evt.getSource() == submenuVer) {
                VentanaPrincipal.this.submenuVerActionPerformed(evt);
            }
            else if (evt.getSource() == checkboxBarraEstado) {
                VentanaPrincipal.this.checkboxBarraEstadoActionPerformed(evt);
            }
            else if (evt.getSource() == opcionUnicoVolcado) {
                VentanaPrincipal.this.opcionUnicoVolcadoActionPerformed(evt);
            }
            else if (evt.getSource() == opcionEnverdecer) {
                VentanaPrincipal.this.opcionEnverdecerActionPerformed(evt);
            }
            else if (evt.getSource() == opcionAutoTintado) {
                VentanaPrincipal.this.opcionAutoTintadoActionPerformed(evt);
            }
            else if (evt.getSource() == opcionLookupIluminar) {
                VentanaPrincipal.this.opcionLookupIluminarActionPerformed(evt);
            }
            else if (evt.getSource() == opcionAcercaDe) {
                VentanaPrincipal.this.opcionAcercaDeActionPerformed(evt);
            }
        }

        public void focusGained(java.awt.event.FocusEvent evt) {
            if (evt.getSource() == sliderBrillo) {
                VentanaPrincipal.this.sliderBrilloFocusGained(evt);
            }
            else if (evt.getSource() == sliderRotacion) {
                VentanaPrincipal.this.sliderRotacionFocusGained(evt);
            }
            else if (evt.getSource() == sliderCuadratica) {
                VentanaPrincipal.this.sliderCuadraticaFocusGained(evt);
            }
            else if (evt.getSource() == sliderTintado) {
                VentanaPrincipal.this.sliderTintadoFocusGained(evt);
            }
            else if (evt.getSource() == sliderLookupPropio) {
                VentanaPrincipal.this.sliderLookupPropioFocusGained(evt);
            }
            else if (evt.getSource() == sliderPosterizar) {
                VentanaPrincipal.this.sliderPosterizarFocusGained(evt);
            }
            else if (evt.getSource() == sliderRojos) {
                VentanaPrincipal.this.sliderRojosFocusGained(evt);
            }
            else if (evt.getSource() == sliderPsicodelico) {
                VentanaPrincipal.this.sliderPsicodelicoFocusGained(evt);
            }
        }

        public void focusLost(java.awt.event.FocusEvent evt) {
            if (evt.getSource() == sliderBrillo) {
                VentanaPrincipal.this.sliderBrilloFocusLost(evt);
            }
            else if (evt.getSource() == sliderRotacion) {
                VentanaPrincipal.this.sliderRotacionFocusLost(evt);
            }
            else if (evt.getSource() == sliderCuadratica) {
                VentanaPrincipal.this.sliderCuadraticaFocusLost(evt);
            }
            else if (evt.getSource() == sliderTintado) {
                VentanaPrincipal.this.sliderTintadoFocusLost(evt);
            }
            else if (evt.getSource() == sliderLookupPropio) {
                VentanaPrincipal.this.sliderLookupPropioFocusLost(evt);
            }
            else if (evt.getSource() == sliderPosterizar) {
                VentanaPrincipal.this.sliderPosterizarFocusLost(evt);
            }
            else if (evt.getSource() == sliderRojos) {
                VentanaPrincipal.this.sliderRojosFocusLost(evt);
            }
            else if (evt.getSource() == sliderPsicodelico) {
                VentanaPrincipal.this.sliderPsicodelicoFocusLost(evt);
            }
        }

        public void stateChanged(javax.swing.event.ChangeEvent evt) {
            if (evt.getSource() == sliderBrillo) {
                VentanaPrincipal.this.sliderBrilloStateChanged(evt);
            }
            else if (evt.getSource() == sliderRotacion) {
                VentanaPrincipal.this.sliderRotacionStateChanged(evt);
            }
            else if (evt.getSource() == sliderCuadratica) {
                VentanaPrincipal.this.sliderCuadraticaStateChanged(evt);
            }
            else if (evt.getSource() == sliderTintado) {
                VentanaPrincipal.this.sliderTintadoStateChanged(evt);
            }
            else if (evt.getSource() == sliderLookupPropio) {
                VentanaPrincipal.this.sliderLookupPropioStateChanged(evt);
            }
            else if (evt.getSource() == sliderPosterizar) {
                VentanaPrincipal.this.sliderPosterizarStateChanged(evt);
            }
            else if (evt.getSource() == sliderRojos) {
                VentanaPrincipal.this.sliderRojosStateChanged(evt);
            }
            else if (evt.getSource() == sliderPsicodelico) {
                VentanaPrincipal.this.sliderPsicodelicoStateChanged(evt);
            }
            else if (evt.getSource() == spinnerGrosor) {
                VentanaPrincipal.this.spinnerGrosorStateChanged(evt);
            }
            else if (evt.getSource() == sliderTransparencia) {
                VentanaPrincipal.this.sliderTransparenciaStateChanged(evt);
            }
        }
    }// </editor-fold>//GEN-END:initComponents

    private void opcionNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionNuevoActionPerformed
        VentanaInternaImagen vi = new VentanaInternaImagen("Nueva ventana");
        vi.addInternalFrameListener(mVentanaInterna);
        vi.getLienzo().addMouseMotionListener(mRaton);
        vi.getLienzo().addLienzoListener(mLienzo);
        zonaEscritorio.add(vi);
        
        int ancho = 600;    //tamaño por defecto
        int alto = 600;
        
        //Si alguna de las dos campos se deja en blanco usaremos tamaños por defecto
        String ancho_i = JOptionPane.showInputDialog("Elige el ancho de la imagen a crear: ");
        if (ancho_i != null && !"".equals(ancho_i)) {
            ancho = Integer.parseInt(ancho_i);
            String alto_i = JOptionPane.showInputDialog("Elige el alto de la imagen a crear: ");
            if (alto_i != null && !"".equals(alto_i)) {
                alto = Integer.parseInt(alto_i);
            }
        }      
        //Ajustar a la imagen creada y un pelín de margen
        vi.setSize(ancho+30, alto+50);

        BufferedImage img = new BufferedImage(ancho, alto, BufferedImage.TYPE_INT_ARGB);
        img.getGraphics().setColor(Color.WHITE);
        img.getGraphics().fillRect(0, 0, img.getWidth(), img.getHeight());
        vi.getLienzo().setImage(img);
        vi.setVisible(true);
    }//GEN-LAST:event_opcionNuevoActionPerformed

    private void opcionAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionAbrirActionPerformed
        JFileChooser dlg = new JFileChooser();
        FileNameExtensionFilter filtroGeneral = new FileNameExtensionFilter("Formatos permitidos (jpg,png,jpeg,bmp,gif,wav,au,avi,mp4,mpg)", "jpg", "png", "jpeg", "bmp", "gif","wav","au","avi","mp4","mpg");
        FileNameExtensionFilter filtroImagenes = new FileNameExtensionFilter("Imagenes (jpg,png,jpeg,bmp,gif)", "jpg", "png", "jpeg", "bmp", "gif");
        FileNameExtensionFilter filtroAudio = new FileNameExtensionFilter("Audios (wav,au)", "wav", "au");
        FileNameExtensionFilter filtroVideo = new FileNameExtensionFilter("Videos (avi,mp4,mpg)", "avi","mp4","mpg");
        dlg.addChoosableFileFilter(filtroGeneral);
        dlg.addChoosableFileFilter(filtroImagenes);
        dlg.addChoosableFileFilter(filtroAudio);
        dlg.addChoosableFileFilter(filtroVideo);
        dlg.setFileFilter(filtroGeneral); //Por defecto aquello que permitimos
        int resp = dlg.showOpenDialog(this);
        if (resp == JFileChooser.APPROVE_OPTION) {
            try {
                File f = dlg.getSelectedFile();
                String ext = f.getName().substring(f.getName().lastIndexOf('.')); //Consigo donde empieza la extension del fichero
                if (esFormatoImagen(ext)) {
                    BufferedImage img = ImageIO.read(f);
                    if (img == null) {
                        throw new java.io.IOException();
                    }
                    VentanaInternaImagen vi = new VentanaInternaImagen("Nueva imagen");
                    vi.getLienzo().setImage(img);
                    vi.setTitle(f.getName());
                    vi.addInternalFrameListener(mVentanaInterna);
                    vi.getLienzo().addMouseMotionListener(mRaton);
                    zonaEscritorio.add(vi);
                    vi.setVisible(true);
                } else if (esFormatoAudio(ext)) {
                    //Recreamos el objeto pero solo con el nombre por fichero. Clases anonimas
                    f = new File(dlg.getSelectedFile().getAbsolutePath()) {
                        @Override
                        public String toString() {
                            return this.getName();
                        }
                    };
                    listaReproduccionAudio.addItem(f);
                    if (!playing && !recording) {
                        listaReproduccionAudio.setSelectedItem(f);
                    }
                } else if (esFormatoVideo(ext)){
                    VentanaInternaVideo vv = VentanaInternaVideo.getInstance(f);
                    vv.addMediaPlayerEventListener(mVideo);
                    vv.addInternalFrameListener(mVentanaVideo);
                    zonaEscritorio.add(vv);
                    vv.setTitle(f.getName());
                    vv.setVisible(true);
                }
            } catch (IOException ex) {
                System.err.println("Ha ocurrido un error al cargar un fichero");
                JOptionPane.showMessageDialog(new JFrame(), "Error al abrir un fichero", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_opcionAbrirActionPerformed

    private boolean esFormatoImagen(String ext) {
        return ".jpg".equals(ext) || ".png".equals(ext) || ".jpeg".equals(ext) || ".bmp".equals(ext) || ".gif".equals(ext);
    }

    private boolean esFormatoAudio(String ext) {
        return ".wav".equals(ext) || ".au".equals(ext);
    }

    private boolean esFormatoVideo(String ext) {
        return ".mp4".equals(ext) || ".avi".equals(ext) || ".mpg".equals(ext);
    }
    
    private void opcionGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionGuardarActionPerformed
        VentanaInternaSM vi = (VentanaInternaSM) this.zonaEscritorio.getSelectedFrame();
        if (vi instanceof VentanaInternaImagen) {
            BufferedImage img = vi.getImage(true);
            if (img != null) {
                JFileChooser dlg = new JFileChooser();
                FileNameExtensionFilter filtroGeneral = new FileNameExtensionFilter("Formatos permitidos (jpg,png,jpeg,bmp,gif)", "jpg", "png", "jpeg", "bmp", "gif");
                dlg.setFileFilter(filtroGeneral);
                int resp = dlg.showSaveDialog(this);
                if (resp == JFileChooser.APPROVE_OPTION) {
                    try {
                        File f = dlg.getSelectedFile();
                        int i = f.getName().lastIndexOf('.');
                        String extension = "png";
                        if (i > 0) {
                            extension = f.getName().substring(i + 1);
                        }

                        boolean ok = ImageIO.write(img, extension, f);
                        if (ok) {
                            vi.setTitle(f.getName());
                        } else {
                            throw new UnsupportedDataTypeException();
                        }
                    } catch (UnsupportedDataTypeException ex) {
                        System.err.println("Formato no soportado al intentar guardar imagen");
                        JOptionPane.showMessageDialog(new JFrame(), "Formato no reconocido", "Error", JOptionPane.ERROR_MESSAGE);
                    } catch (IOException ex) {
                        System.err.println("Ha ocurrido un error al guardar una imagen");
                        JOptionPane.showMessageDialog(new JFrame(), "Ha ocurrido un error al guardar una imagen", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        }
    }//GEN-LAST:event_opcionGuardarActionPerformed

    private void switchLineaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_switchLineaActionPerformed
        if(this.zonaEscritorio.getSelectedFrame() instanceof VentanaInternaImagen) {
            barraEstado.setText("Dibujando: línea");
            ((VentanaInternaImagen) this.zonaEscritorio.getSelectedFrame()).getLienzo().setHerramienta(Lienzo2D.Herramienta.LINEA);
            ((VentanaInternaImagen) this.zonaEscritorio.getSelectedFrame()).getLienzo().setEditarFiguras(false);
        }
    }//GEN-LAST:event_switchLineaActionPerformed

    private void switchRectanguloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_switchRectanguloActionPerformed
        if (this.zonaEscritorio.getSelectedFrame() instanceof VentanaInternaImagen) {
            barraEstado.setText("Dibujando: rectángulo");
            ((VentanaInternaImagen) this.zonaEscritorio.getSelectedFrame()).getLienzo().setHerramienta(Lienzo2D.Herramienta.RECTANGULO);
            ((VentanaInternaImagen) this.zonaEscritorio.getSelectedFrame()).getLienzo().setEditarFiguras(false);
        }
    }//GEN-LAST:event_switchRectanguloActionPerformed

    private void switchElipseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_switchElipseActionPerformed
        if (this.zonaEscritorio.getSelectedFrame() instanceof VentanaInternaImagen) {
            barraEstado.setText("Dibujando: elipse");
            ((VentanaInternaImagen) this.zonaEscritorio.getSelectedFrame()).getLienzo().setHerramienta(Lienzo2D.Herramienta.ELIPSE);
            ((VentanaInternaImagen) this.zonaEscritorio.getSelectedFrame()).getLienzo().setEditarFiguras(false);
        }
    }//GEN-LAST:event_switchElipseActionPerformed

    private void opcionSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionSalirActionPerformed
        System.exit(0);
    }//GEN-LAST:event_opcionSalirActionPerformed

    private void submenuVerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submenuVerActionPerformed
        checkboxBarraEstado.setVisible(checkboxBarraEstado.getState());
    }//GEN-LAST:event_submenuVerActionPerformed

    private void checkboxBarraEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkboxBarraEstadoActionPerformed
        barraEstado.setVisible(checkboxBarraEstado.getState());
    }//GEN-LAST:event_checkboxBarraEstadoActionPerformed

    private void botonNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonNuevoActionPerformed
        opcionNuevoActionPerformed(evt);
    }//GEN-LAST:event_botonNuevoActionPerformed

    private void botonAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAbrirActionPerformed
        opcionAbrirActionPerformed(evt);
    }//GEN-LAST:event_botonAbrirActionPerformed

    private void botonGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGuardarActionPerformed
        opcionGuardarActionPerformed(evt);
    }//GEN-LAST:event_botonGuardarActionPerformed

    private void switchEdicionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_switchEdicionActionPerformed
        if (this.zonaEscritorio.getSelectedFrame() instanceof VentanaInternaImagen) {
            barraEstado.setText("Modo de edición");
            ((VentanaInternaImagen) this.zonaEscritorio.getSelectedFrame()).getLienzo().setEditarFiguras(switchEdicion.isSelected());
        }
    }//GEN-LAST:event_switchEdicionActionPerformed

    private void switchRellenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_switchRellenoActionPerformed
        VentanaInternaSM vi = (VentanaInternaSM) this.zonaEscritorio.getSelectedFrame();
        if(vi instanceof VentanaInternaImagen) {
            ((VentanaInternaImagen) this.zonaEscritorio.getSelectedFrame()).getLienzo().setRellenoColor(switchRelleno.isSelected());
            if (!switchRelleno.isSelected()) {
                switchDegradado.setSelected(false);
            } else {
                if(((VentanaInternaImagen) this.zonaEscritorio.getSelectedFrame()).getLienzo().getEstoyDegradado())
                    switchDegradado.setSelected(true);
            }
        }
    }//GEN-LAST:event_switchRellenoActionPerformed

    private void switchTransparenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_switchTransparenciaActionPerformed
        if (this.zonaEscritorio.getSelectedFrame() instanceof VentanaInternaImagen) {
            ((VentanaInternaImagen) this.zonaEscritorio.getSelectedFrame()).getLienzo().setTransparencia(switchTransparencia.isSelected());

            if (switchTransparencia.isSelected()) {
                ((VentanaInternaImagen) this.zonaEscritorio.getSelectedFrame()).getLienzo().setGradoTransparencia(sliderTransparencia.getValue());
            } else {
                ((VentanaInternaImagen) this.zonaEscritorio.getSelectedFrame()).getLienzo().setGradoTransparencia(100);
            }
        }
    }//GEN-LAST:event_switchTransparenciaActionPerformed

    private void switchAlisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_switchAlisarActionPerformed
        if (this.zonaEscritorio.getSelectedFrame() instanceof VentanaInternaImagen) 
            ((VentanaInternaImagen) this.zonaEscritorio.getSelectedFrame()).getLienzo().setAlisado(switchAlisar.isSelected());
    }//GEN-LAST:event_switchAlisarActionPerformed

    private void spinnerGrosorStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerGrosorStateChanged
        if (this.zonaEscritorio.getSelectedFrame() instanceof VentanaInternaImagen) 
            ((VentanaInternaImagen) this.zonaEscritorio.getSelectedFrame()).getLienzo().setStroke((int) spinnerGrosor.getModel().getValue());
    }//GEN-LAST:event_spinnerGrosorStateChanged

    private void comboboxColorBordeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboboxColorBordeActionPerformed
        if (this.zonaEscritorio.getSelectedFrame() instanceof VentanaInternaImagen) {
            ((VentanaInternaImagen) this.zonaEscritorio.getSelectedFrame()).getLienzo().setColorBorde((Color) comboboxColorBorde.getSelectedItem());
            ((VentanaInternaImagen) this.zonaEscritorio.getSelectedFrame()).getLienzo().setOpcionDegradado(comboboxDegradado.getSelectedIndex());
        }
    }//GEN-LAST:event_comboboxColorBordeActionPerformed

    private void switchEfectoVentanaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_switchEfectoVentanaActionPerformed
        if (this.zonaEscritorio.getSelectedFrame() instanceof VentanaInternaImagen)
            ((VentanaInternaImagen) this.zonaEscritorio.getSelectedFrame()).getLienzo().setEfectoVentana(switchEfectoVentana.isSelected());
    }//GEN-LAST:event_switchEfectoVentanaActionPerformed

    private void opcionDuplicarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionDuplicarActionPerformed
        VentanaInternaSM vi = (VentanaInternaSM) (zonaEscritorio.getSelectedFrame());
        if(vi instanceof VentanaInternaImagen) {
            switchVolcadoActionPerformed(null);
            if (vi.getImage(false) != null) {
                try {
                    ColorModel cm = vi.getImage(false).getColorModel();
                    WritableRaster raster = vi.getImage(false).copyData(null);
                    boolean alfaPre = vi.getImage(false).isAlphaPremultiplied();
                    BufferedImage img_copia = new BufferedImage(cm, raster, alfaPre, null);

                    VentanaInternaImagen vi_copia = new VentanaInternaImagen("Duplicado");
                    zonaEscritorio.add(vi_copia);
                    vi_copia.setImage(img_copia);
                    vi_copia.setVisible(true);
                } catch (Exception ex) {
                    System.err.println("Ha ocurrido un error al duplicar una ventana");
                    JOptionPane.showMessageDialog(new JFrame(), "Error al duplicar ventana", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_opcionDuplicarActionPerformed

    private void aplicarRotacion(int angulo) {
        VentanaInternaSM vi = (VentanaInternaSM) (zonaEscritorio.getSelectedFrame());
        if (vi instanceof VentanaInternaImagen) {
            switchVolcadoActionPerformed(null);
            try {
                BufferedImage img = vi.getImage(false);
                double giro_radianes = Math.toRadians(angulo);
                Point centro_imagen = new Point(img.getWidth() / 2, img.getHeight() / 2);
                AffineTransform at = AffineTransform.getRotateInstance(giro_radianes, centro_imagen.x, centro_imagen.y);
                AffineTransformOp atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                BufferedImage imgdest = atop.filter(img, null);
                vi.setImage(imgdest);
                ((VentanaInternaImagen) vi).getLienzo().repaint();
            } catch (Exception ex) {
                System.err.println("Ha ocurrido al rotar la imagen");
                JOptionPane.showMessageDialog(new JFrame(), "Error al rotar la imagen", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void aplicarLookup(LookupTable tabla) {
        VentanaInternaSM vi = (VentanaInternaSM) (zonaEscritorio.getSelectedFrame());
        if (vi instanceof VentanaInternaImagen) {
            switchVolcadoActionPerformed(null);
            try {
                BufferedImage imgLienzo = vi.getImage(false);
                ColorModel cm = vi.getImage(false).getColorModel();
                WritableRaster raster = vi.getImage(false).copyData(null);
                boolean alfaPre = vi.getImage(false).isAlphaPremultiplied();
                BufferedImage imgF = new BufferedImage(cm, raster, alfaPre, null);
                if (imgLienzo != null) {
                    LookupOp lop = new LookupOp(tabla, null);
                    lop.filter(imgF, imgLienzo);
                    zonaEscritorio.repaint();
                }
            } catch (IllegalArgumentException ex) {
                System.err.println("Ha ocurrido un error al aplicar contraste");
                JOptionPane.showMessageDialog(new JFrame(), "Error al aplicar contraste ", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private LookupTable cuadratica(double m) {
        double Max;
        if (m >= 128) {
            Max = (1.0 / 100.0) * Math.pow((0 - m), 2);
        } else {
            Max = (1.0 / 100.0) * Math.pow((255 - m), 2);
        }
        double K = 255.0 / Max;
        byte lt[] = new byte[256];
        for (int i = 0; i < 256; i++) {
            lt[i] = (byte) (K * (1.0 / 100.0) * Math.pow((i - m), 2));
        }
        ByteLookupTable slt = new ByteLookupTable(0, lt);
        return slt;
    }

    private LookupTable LookupRetoP10() {
        double Max_log = Math.log(1.0 + 16020.0); //16021 es el valor para que la expresión vale y=128 en x=128
        double K_log = 255.0 / Max_log;
        byte lt[] = new byte[256];
        for (int i = 0; i < 256; i++) {
            if (i < 128) {
                lt[i] = (byte) (K_log * Math.log(1.0 + i));
            } else {
                lt[i] = (byte) i;
            }
        }
        ByteLookupTable retoP10 = new ByteLookupTable(0, lt);
        return retoP10;
    }

    private void aplicarZoom(AffineTransform at) {
        VentanaInternaSM vi = (VentanaInternaSM) (zonaEscritorio.getSelectedFrame());
        if (vi instanceof VentanaInternaImagen) {
            switchVolcadoActionPerformed(null);
            BufferedImage img = vi.getImage(false);
            if (img != null) {
                try {
                    AffineTransformOp atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter(img, null);
                    vi.setImage(imgdest);
                    ((VentanaInternaImagen)vi).getLienzo().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println("Ha ocurrido un error al aplicar zoom");
                    JOptionPane.showMessageDialog(new JFrame(), "Error al aplicar zoom ", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }

    private void sliderBrilloFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderBrilloFocusGained
        VentanaInternaSM vi = (VentanaInternaSM) (zonaEscritorio.getSelectedFrame());
        if (vi instanceof VentanaInternaImagen) {
            switchVolcadoActionPerformed(null);
            ColorModel cm = vi.getImage(false).getColorModel();
            WritableRaster raster = vi.getImage(false).copyData(null);
            boolean alfaPre = vi.getImage(false).isAlphaPremultiplied();
            imgFuente = new BufferedImage(cm, raster, alfaPre, null);
        }
    }//GEN-LAST:event_sliderBrilloFocusGained

    private void sliderBrilloFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderBrilloFocusLost
        imgFuente = null;
        sliderBrillo.setValue(0);
    }//GEN-LAST:event_sliderBrilloFocusLost

    private void sliderBrilloStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderBrilloStateChanged
        VentanaInternaSM vi = (VentanaInternaSM) (zonaEscritorio.getSelectedFrame());
        if (vi instanceof VentanaInternaImagen && imgFuente != null) {
            BufferedImage img = vi.getImage(false);
            RescaleOp rop;
            if (img != null) {
                try {
                    int valorSlider = this.sliderBrillo.getValue();
                    if (img.getColorModel().hasAlpha()) {
                        float offset[] = {valorSlider, valorSlider, valorSlider, 0};
                        float escala[] = {1.0f, 1.0f, 1.0f, 1.0f};
                        rop = new RescaleOp(escala, offset, null);
                    } else {
                        rop = new RescaleOp(1.0f, valorSlider, null);
                    }
                    rop.filter(imgFuente, img);
                    zonaEscritorio.repaint();   //Cambio para actualizar brillos en extraccion de bandas (P11)
                } catch (IllegalArgumentException e) {
                    System.err.println("Ha ocurrido un error con el deslizador de brillo");
                    JOptionPane.showMessageDialog(new JFrame(), "Error en el deslizador de brillo", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_sliderBrilloStateChanged

    private void botonContrasteNormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonContrasteNormalActionPerformed
        LookupTable tabla = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_SFUNCION);
        aplicarLookup(tabla);
    }//GEN-LAST:event_botonContrasteNormalActionPerformed

    private void botonContrasteIluminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonContrasteIluminarActionPerformed
        LookupTable tabla = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_LOGARITHM);
        aplicarLookup(tabla);
    }//GEN-LAST:event_botonContrasteIluminarActionPerformed

    private void botonContrasteOscurecidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonContrasteOscurecidoActionPerformed
        LookupTable tabla = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_POWER);
        aplicarLookup(tabla);
    }//GEN-LAST:event_botonContrasteOscurecidoActionPerformed

    private void botonNegativoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonNegativoActionPerformed
        LookupTable tabla = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_NEGATIVE);
        aplicarLookup(tabla);
    }//GEN-LAST:event_botonNegativoActionPerformed

    private void comboboxFiltrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboboxFiltrosActionPerformed
        VentanaInternaSM vi = (VentanaInternaSM) (zonaEscritorio.getSelectedFrame());
        if (vi instanceof VentanaInternaImagen) {
            switchVolcadoActionPerformed(null);
            BufferedImage img = vi.getImage(false);
            ColorModel cm = vi.getImage(false).getColorModel();
            WritableRaster raster = vi.getImage(false).copyData(null);
            boolean alfaPre = vi.getImage(false).isAlphaPremultiplied();
            BufferedImage imgF = new BufferedImage(cm, raster, alfaPre, null);

            Kernel k = this.getKernel(comboboxFiltros.getSelectedIndex());
            if (k != null) {
                try {
                    ConvolveOp cop = new ConvolveOp(k, ConvolveOp.EDGE_NO_OP, null);
                    cop.filter(imgF, img);
                    zonaEscritorio.repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_comboboxFiltrosActionPerformed

    private void boton90gradosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton90gradosActionPerformed
        aplicarRotacion(90);
    }//GEN-LAST:event_boton90gradosActionPerformed

    private void boton180gradosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton180gradosActionPerformed
        aplicarRotacion(180);
    }//GEN-LAST:event_boton180gradosActionPerformed

    private void boton270gradosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton270gradosActionPerformed
        aplicarRotacion(270);
    }//GEN-LAST:event_boton270gradosActionPerformed

    private void sliderRotacionFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderRotacionFocusGained
        VentanaInternaSM vi = (VentanaInternaSM) (zonaEscritorio.getSelectedFrame());
        if (vi instanceof VentanaInternaImagen) {       
            switchVolcadoActionPerformed(null);
            ColorModel cm = vi.getImage(false).getColorModel();
            WritableRaster raster = vi.getImage(false).copyData(null);
            boolean alfaPre = vi.getImage(false).isAlphaPremultiplied();
            imgFuente = new BufferedImage(cm, raster, alfaPre, null);
        }
    }//GEN-LAST:event_sliderRotacionFocusGained

    private void sliderRotacionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderRotacionFocusLost
        imgFuente = null;
        this.sliderRotacion.setValue(0);
    }//GEN-LAST:event_sliderRotacionFocusLost

    private void sliderRotacionStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderRotacionStateChanged
        VentanaInternaSM vi = (VentanaInternaSM) (zonaEscritorio.getSelectedFrame());
        if (vi instanceof VentanaInternaImagen && imgFuente != null) {        
            try {
                double giro_radianes = Math.toRadians(sliderRotacion.getValue());
                Point centro_imagen = new Point(imgFuente.getWidth() / 2, imgFuente.getHeight() / 2);
                AffineTransform at = AffineTransform.getRotateInstance(giro_radianes, centro_imagen.x, centro_imagen.y);
                AffineTransformOp atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                BufferedImage imgdest = atop.filter(imgFuente, null);
                vi.setImage(imgdest);
                ((VentanaInternaImagen)vi).getLienzo().repaint();
            } catch (Exception ex) {
                System.err.println("Ha ocurrido un error con el deslizador de rotacion");
                JOptionPane.showMessageDialog(new JFrame(), "Error en el deslizador de rotacion", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_sliderRotacionStateChanged

    private void botonZoomINActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonZoomINActionPerformed
        AffineTransform at = AffineTransform.getScaleInstance(1.25, 1.25);
        aplicarZoom(at);
    }//GEN-LAST:event_botonZoomINActionPerformed

    private void botonZoomOUTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonZoomOUTActionPerformed
        AffineTransform at = AffineTransform.getScaleInstance(0.75, 0.75);
        aplicarZoom(at);
    }//GEN-LAST:event_botonZoomOUTActionPerformed

    private void sliderCuadraticaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderCuadraticaFocusGained
        VentanaInternaSM vi = (VentanaInternaSM) (zonaEscritorio.getSelectedFrame());
        if (vi instanceof VentanaInternaImagen) {         
            switchVolcadoActionPerformed(null);
            ColorModel cm = vi.getImage(false).getColorModel();
            WritableRaster raster = vi.getImage(false).copyData(null);
            boolean alfaPre = vi.getImage(false).isAlphaPremultiplied();
            imgFuente = new BufferedImage(cm, raster, alfaPre, null);
        }
    }//GEN-LAST:event_sliderCuadraticaFocusGained

    private void sliderCuadraticaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderCuadraticaFocusLost
        imgFuente = null;
        sliderCuadratica.setValue(128);
    }//GEN-LAST:event_sliderCuadraticaFocusLost

    private void sliderCuadraticaStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderCuadraticaStateChanged
        LookupTable tabla = cuadratica(sliderCuadratica.getValue());
        VentanaInternaSM vi = (VentanaInternaSM) (zonaEscritorio.getSelectedFrame());
        if (vi instanceof VentanaInternaImagen && imgFuente != null) {
            BufferedImage img = vi.getImage(false);
            try {
                LookupOp lop = new LookupOp(tabla, null);
                lop.filter(imgFuente, img);
                ((VentanaInternaImagen)vi).getLienzo().repaint();
            } catch (Exception ex) {
                System.err.println("Ha ocurrido un error con el deslizador del parametro de la funcion cuadratica");
                JOptionPane.showMessageDialog(new JFrame(), "Error en el deslizador de la cuadratica", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_sliderCuadraticaStateChanged

    private void botonBandasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBandasActionPerformed
        VentanaInternaSM vi = (VentanaInternaSM) (zonaEscritorio.getSelectedFrame());
        if (vi instanceof VentanaInternaImagen) {         
            switchVolcadoActionPerformed(null);
            BufferedImage img = vi.getImage(false);
            if (img != null) {
                try {
                    float[][] matriz = {{0.0F, 0.5F, 0.5F},
                    {0.5F, 0.0F, 0.5F},
                    {0.5F, 0.5F, 0.0F}};
                    BandCombineOp bcop = new BandCombineOp(matriz, null);
                    bcop.filter(img.getRaster(), img.getRaster());
                    ((VentanaInternaImagen)vi).getLienzo().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println("Ha ocurrido un error con la media de bandas");
                    JOptionPane.showMessageDialog(new JFrame(), "Error en la media de bandas", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_botonBandasActionPerformed

    private void botonSepiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSepiaActionPerformed
        VentanaInternaSM vi = (VentanaInternaSM) (zonaEscritorio.getSelectedFrame());
        if (vi instanceof VentanaInternaImagen) {         
            switchVolcadoActionPerformed(null);
            BufferedImage img = vi.getImage(false);
            if (img != null) {
                try {
                    SepiaOp sepia = new SepiaOp();
                    sepia.filter(img, img);
                    ((VentanaInternaImagen)vi).getLienzo().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println("Ha ocurrido al aplicar filtro sepia");
                    JOptionPane.showMessageDialog(new JFrame(), "Error al aplicar filtro sepia", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_botonSepiaActionPerformed

    private void botonEcualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEcualizarActionPerformed
        VentanaInternaSM vi = (VentanaInternaSM) (zonaEscritorio.getSelectedFrame());
        if (vi instanceof VentanaInternaImagen) {
            switchVolcadoActionPerformed(null);
            BufferedImage img = vi.getImage(false);
            if (img != null) {
                try {
                    ColorSpace cs = new sm.image.color.YCbCrColorSpace();
                    ColorConvertOp ccop = new ColorConvertOp(cs, null);
                    BufferedImage imgdest = ccop.filter(img, null);
                    EqualizationOp ecualizacion = new EqualizationOp(0);
                    ecualizacion.filter(imgdest, imgdest);
                    vi.setImage(imgdest);
                    ((VentanaInternaImagen)vi).getLienzo().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println("Ha ocurrido al ecualizar imagen");
                    JOptionPane.showMessageDialog(new JFrame(), "Error al aplicar ecualizacion", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_botonEcualizarActionPerformed

    private void sliderPosterizarFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderPosterizarFocusGained
        VentanaInternaSM vi = (VentanaInternaSM) (zonaEscritorio.getSelectedFrame());
        if (vi instanceof VentanaInternaImagen) {            
            switchVolcadoActionPerformed(null);
            ColorModel cm = vi.getImage(false).getColorModel();
            WritableRaster raster = vi.getImage(false).copyData(null);
            boolean alfaPre = vi.getImage(false).isAlphaPremultiplied();
            imgFuente = new BufferedImage(cm, raster, alfaPre, null);
        }
    }//GEN-LAST:event_sliderPosterizarFocusGained

    private void sliderPosterizarFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderPosterizarFocusLost
        imgFuente = null;
        sliderPosterizar.setValue(2);
    }//GEN-LAST:event_sliderPosterizarFocusLost

    private void sliderPosterizarStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderPosterizarStateChanged
        VentanaInternaSM vi = (VentanaInternaSM) (zonaEscritorio.getSelectedFrame());
        if (vi instanceof VentanaInternaImagen && imgFuente != null) {
            BufferedImage img = vi.getImage(false);
            if (img != null) {
                try {
                    int valorSlider = this.sliderPosterizar.getValue();
                    PosterizarOp postop = new PosterizarOp(valorSlider);
                    postop.filter(imgFuente, img);
                    ((VentanaInternaImagen)vi).getLienzo().repaint();

                } catch (IllegalArgumentException e) {
                    System.err.println("Ha ocurrido un error con el deslizador de posterización");
                    JOptionPane.showMessageDialog(new JFrame(), "Error en el deslizador de posterización", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_sliderPosterizarStateChanged

    private void sliderRojosFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderRojosFocusGained
        VentanaInternaImagen vi = (VentanaInternaImagen) (zonaEscritorio.getSelectedFrame());
        if (vi != null) {
            ColorModel cm = vi.getLienzo().getImage().getColorModel();
            WritableRaster raster = vi.getLienzo().getImage().copyData(null);
            boolean alfaPre = vi.getLienzo().getImage().isAlphaPremultiplied();
            imgFuente = new BufferedImage(cm, raster, alfaPre, null);
        }
    }//GEN-LAST:event_sliderRojosFocusGained

    private void sliderRojosFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderRojosFocusLost
        imgFuente = null;
        sliderPosterizar.setValue(0);
    }//GEN-LAST:event_sliderRojosFocusLost

    private void sliderRojosStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderRojosStateChanged
        VentanaInternaSM vi = (VentanaInternaSM) (zonaEscritorio.getSelectedFrame());
        if (vi instanceof VentanaInternaImagen && imgFuente != null) {
            BufferedImage img = vi.getImage(false);
            if (img != null) {
                try {
                    int valorSlider = this.sliderRojos.getValue();
                    RedOp redop = new RedOp(valorSlider);
                    redop.filter(imgFuente, img);
                    ((VentanaInternaImagen)vi).getLienzo().repaint();

                } catch (IllegalArgumentException e) {
                    System.err.println("Ha ocurrido un error con el deslizador de resalte de rojos");
                    JOptionPane.showMessageDialog(new JFrame(), "Error en el deslizador de resalte de rojos", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_sliderRojosStateChanged

    private void botonExtraerBandasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonExtraerBandasActionPerformed
        VentanaInternaSM vi = (VentanaInternaSM) (zonaEscritorio.getSelectedFrame());
        if (vi instanceof VentanaInternaImagen) {    
            BufferedImage img = vi.getImage(false);
            if (img != null) {
                String nom_img = vi.getTitle();
                try {
                    for (int i = 0; i < img.getRaster().getNumBands(); i++) {
                        String titulo = nom_img + " Banda [" + i + "]";
                        BufferedImage imgbanda = getImageBand(img, i);
                        VentanaInternaImagen vimg = new VentanaInternaImagen(titulo);
                        vimg.addInternalFrameListener(mVentanaInterna);
                        vimg.getLienzo().addMouseMotionListener(mRaton);
                        vimg.setImage(imgbanda);
                        zonaEscritorio.add(vimg);
                        vimg.setVisible(true);
                    }
                } catch (IllegalArgumentException e) {
                    System.err.println("Ha ocurrido un error con el extracción de bandas");
                    JOptionPane.showMessageDialog(new JFrame(), "Error en la extracción de bandas", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_botonExtraerBandasActionPerformed

    private void comboboxEspaciosColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboboxEspaciosColorActionPerformed
        VentanaInternaSM vi = (VentanaInternaSM) (zonaEscritorio.getSelectedFrame());
        if (vi instanceof VentanaInternaImagen) {        
            switchVolcadoActionPerformed(null);
            BufferedImage img = vi.getImage(false);
            if (img != null) {
                ColorSpace cs = null;
                String cspace = "";
                switch (this.comboboxEspaciosColor.getSelectedIndex()) {
                    case 0: //sRGB
                        cs = ColorSpace.getInstance(ColorSpace.CS_sRGB);
                        cspace = " sRGB";
                        break;
                    case 1: //YCC
                        cs = ColorSpace.getInstance(ColorSpace.CS_PYCC);
                        cspace = " YCC";
                        break;
                    case 2: //GREY
                        cs = new sm.image.color.GreyColorSpace();
                        cspace = " Grey";
                        break;
                    case 3: //YCbCr
                        cs = new sm.image.color.YCbCrColorSpace();
                        cspace = " YCbCr";
                        break;
                }
                try {
                    ColorConvertOp ccop = new ColorConvertOp(cs, null);
                    BufferedImage imgdest = ccop.filter(img, null);
                    VentanaInternaImagen vimg = new VentanaInternaImagen(vi.getTitle() + cspace);
                    vimg.addInternalFrameListener(mVentanaInterna);
                    vimg.getLienzo().addMouseMotionListener(mRaton);
                    vimg.setImage(imgdest);
                    zonaEscritorio.add(vimg);
                    vimg.setVisible(true);
                } catch (Exception e) {
                    System.err.println("Ha ocurrido un error al cambiar el espacio de color");
                    JOptionPane.showMessageDialog(new JFrame(), "Error al cambiar espacio de color", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_comboboxEspaciosColorActionPerformed

    private void sliderTintadoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderTintadoFocusLost
        imgFuente = null;
        sliderTintado.setValue(128);
    }//GEN-LAST:event_sliderTintadoFocusLost

    private void sliderTintadoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderTintadoFocusGained
        VentanaInternaImagen vi = (VentanaInternaImagen) (zonaEscritorio.getSelectedFrame());
        switchVolcadoActionPerformed(null);
        if (vi != null) {
            ColorModel cm = vi.getLienzo().getImage().getColorModel();
            WritableRaster raster = vi.getLienzo().getImage().copyData(null);
            boolean alfaPre = vi.getLienzo().getImage().isAlphaPremultiplied();
            imgFuente = new BufferedImage(cm, raster, alfaPre, null);
        }
    }//GEN-LAST:event_sliderTintadoFocusGained

    private void sliderTintadoStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderTintadoStateChanged
        VentanaInternaSM vi = (VentanaInternaSM) (zonaEscritorio.getSelectedFrame());
        if (vi instanceof VentanaInternaImagen && imgFuente != null) {
            BufferedImage img = vi.getImage(false);
            if (img != null) {
                try {
                    TintOp tintado = new TintOp(((VentanaInternaImagen)vi).getLienzo().getColorBorde(), sliderTintado.getValue() / 100.0f);
                    tintado.filter(imgFuente, img);
                    ((VentanaInternaImagen)vi).getLienzo().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println("Ha ocurrido un error con el deslizador de brillo");
                    JOptionPane.showMessageDialog(new JFrame(), "Error en el deslizador de brillo", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_sliderTintadoStateChanged

    private void sliderPsicodelicoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderPsicodelicoFocusGained
        VentanaInternaSM vi = (VentanaInternaSM) (zonaEscritorio.getSelectedFrame());
        if (vi instanceof VentanaInternaImagen) {        
            switchVolcadoActionPerformed(null);
            ColorModel cm = vi.getImage(false).getColorModel();
            WritableRaster raster = vi.getImage(false).copyData(null);
            boolean alfaPre = vi.getImage(false).isAlphaPremultiplied();
            imgFuente = new BufferedImage(cm, raster, alfaPre, null);
        }
    }//GEN-LAST:event_sliderPsicodelicoFocusGained

    private void sliderPsicodelicoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderPsicodelicoFocusLost
        imgFuente = null;
        sliderPsicodelico.setValue(2);
    }//GEN-LAST:event_sliderPsicodelicoFocusLost

    private void sliderPsicodelicoStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderPsicodelicoStateChanged
        VentanaInternaSM vi = (VentanaInternaSM) (zonaEscritorio.getSelectedFrame());
        if (vi instanceof VentanaInternaImagen && imgFuente != null) {
            BufferedImage img = vi.getImage(false);
            if (img != null) {
                try {
                    MiOperatorOp operator = new MiOperatorOp(sliderPsicodelico.getValue());
                    operator.filter(imgFuente, img);
                    ((VentanaInternaImagen)vi).getLienzo().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println("Ha ocurrido un error con el deslizador de brillo");
                    JOptionPane.showMessageDialog(new JFrame(), "Error en el deslizador de brillo", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_sliderPsicodelicoStateChanged

    private void switchLapizActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_switchLapizActionPerformed
        if (this.zonaEscritorio.getSelectedFrame() instanceof VentanaInternaImagen) {
            barraEstado.setText("Dibujando: trazo libre");
            ((VentanaInternaImagen) this.zonaEscritorio.getSelectedFrame()).getLienzo().setHerramienta(Lienzo2D.Herramienta.LAPIZ);
            ((VentanaInternaImagen) this.zonaEscritorio.getSelectedFrame()).getLienzo().setEditarFiguras(false);
        }
    }//GEN-LAST:event_switchLapizActionPerformed

    private void comboboxColorRellenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboboxColorRellenoActionPerformed
        if (this.zonaEscritorio.getSelectedFrame() instanceof VentanaInternaImagen) {
            ((VentanaInternaImagen) this.zonaEscritorio.getSelectedFrame()).getLienzo().setColorRelleno((Color) comboboxColorRelleno.getSelectedItem());
            ((VentanaInternaImagen) this.zonaEscritorio.getSelectedFrame()).getLienzo().setOpcionDegradado(comboboxDegradado.getSelectedIndex());
        }
    }//GEN-LAST:event_comboboxColorRellenoActionPerformed

    private void sliderTransparenciaStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderTransparenciaStateChanged
        if (this.zonaEscritorio.getSelectedFrame() instanceof VentanaInternaImagen) {
            if (this.switchTransparencia.isSelected()) {
                ((VentanaInternaImagen) this.zonaEscritorio.getSelectedFrame()).getLienzo().setGradoTransparencia(sliderTransparencia.getValue());
            } else {
                ((VentanaInternaImagen) this.zonaEscritorio.getSelectedFrame()).getLienzo().setGradoTransparencia(sliderTransparencia.getMaximum());
            }
        }
    }//GEN-LAST:event_sliderTransparenciaStateChanged

    private void switchDegradadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_switchDegradadoActionPerformed
        if (this.zonaEscritorio.getSelectedFrame() instanceof VentanaInternaImagen)
            ((VentanaInternaImagen) this.zonaEscritorio.getSelectedFrame()).getLienzo().setDegradado(switchDegradado.isSelected());
    }//GEN-LAST:event_switchDegradadoActionPerformed

    private void selectorColoresBordeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectorColoresBordeActionPerformed
        Color c = JColorChooser.showDialog(null, "Elija un color para el borde", getForeground());
        if (c != null) {
            VentanaInternaSM vi = ((VentanaInternaSM) this.zonaEscritorio.getSelectedFrame());
            if (vi instanceof VentanaInternaImagen) {
                ((VentanaInternaImagen)vi).getLienzo().setColorBorde(c);
                ((VentanaInternaImagen)vi).getLienzo().setOpcionDegradado(comboboxDegradado.getSelectedIndex());
                if (checkColorCombobox(c, comboboxColorBorde)) {
                    this.comboboxColorBorde.addItem(c);
                    this.comboboxColorBorde.setSelectedItem(c);
                }
            }
        }
    }//GEN-LAST:event_selectorColoresBordeActionPerformed

    private void selectorColoresRellenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectorColoresRellenoActionPerformed
        Color c = JColorChooser.showDialog(null, "Elija un color para el relleno", getForeground());
        if (c != null) {
            VentanaInternaSM vi = ((VentanaInternaSM) this.zonaEscritorio.getSelectedFrame());
            if(vi instanceof VentanaInternaImagen) {
                ((VentanaInternaImagen)vi).getLienzo().setColorRelleno(c);
                ((VentanaInternaImagen)vi).getLienzo().setOpcionDegradado(comboboxDegradado.getSelectedIndex());
                if (checkColorCombobox(c,comboboxColorRelleno)) {
                    this.comboboxColorRelleno.addItem(c);
                    this.comboboxColorRelleno.setSelectedItem(c);
                }
            }
        }
    }//GEN-LAST:event_selectorColoresRellenoActionPerformed

    private boolean checkColorCombobox(Color c, JComboBox cb) {  
        for(int i = 0; i < cb.getItemCount(); i++) {
            if(cb.getItemAt(i) == c)
                return false;
        }
        return true;
    }

    private void switchCurvaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_switchCurvaActionPerformed
        if (this.zonaEscritorio.getSelectedFrame() instanceof VentanaInternaImagen) {
            barraEstado.setText("Dibujando: curva de un punto de control");
            ((VentanaInternaImagen) this.zonaEscritorio.getSelectedFrame()).getLienzo().setHerramienta(Lienzo2D.Herramienta.CURVA);
            ((VentanaInternaImagen) this.zonaEscritorio.getSelectedFrame()).getLienzo().setEditarFiguras(false);
        }
    }//GEN-LAST:event_switchCurvaActionPerformed

    private void comboboxDegradadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboboxDegradadoActionPerformed
        VentanaInternaSM vi = ((VentanaInternaSM) this.zonaEscritorio.getSelectedFrame());
        if (vi instanceof VentanaInternaImagen) {
            switchVolcadoActionPerformed(null);
            ((VentanaInternaImagen) vi).getLienzo().setOpcionDegradado(comboboxDegradado.getSelectedIndex());
            vi.repaint();
        }
    }//GEN-LAST:event_comboboxDegradadoActionPerformed

    private void switchDiscontinuidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_switchDiscontinuidadActionPerformed
        if (this.zonaEscritorio.getSelectedFrame() instanceof VentanaInternaImagen) {
            ((VentanaInternaImagen) this.zonaEscritorio.getSelectedFrame()).getLienzo().setEstoyDiscontinuo(switchDiscontinuidad.isSelected());
            repaint();
        }
    }//GEN-LAST:event_switchDiscontinuidadActionPerformed

    private void botonReproducirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonReproducirActionPerformed
        if(this.zonaEscritorio.getSelectedFrame() instanceof VentanaInternaVideo){
            VentanaInternaVideo vv = (VentanaInternaVideo)zonaEscritorio.getSelectedFrame();
            if(vv!=null){
                vv.play();
            }
        } else {  
            File f = (File) listaReproduccionAudio.getSelectedItem();
            if (f != null && player == null) {
                player = new SMClipPlayer(f);
                obtenerDuracionFicheroAudio(f);
                if (player != null) {
                    player.addLineListener(new ManejadorAudioReproducir());
                    player.play();
                }
            } else {
                if (!playing) {
                    player.resume();
                    playing = true;
                } else {
                    player.pause();
                    playing = false;
                }
            }
        }
    }//GEN-LAST:event_botonReproducirActionPerformed

    private int obtenerDuracionFicheroAudio(File f) {
        int durationInSeconds = 0;
        try {
            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(f);
            AudioFormat format = audioInputStream.getFormat();
            long frames = audioInputStream.getFrameLength();
            durationInSeconds = (int) (frames / format.getFrameRate());
            int segs_d = durationInSeconds % 60;
            int min_d = (durationInSeconds - segs_d) / 60;
            formatEtiquetasTiempos(segs_d, min_d, etiquetaDuracionTotalAudio);
        } catch (Exception ex) {
            System.err.println(ex);
        }
        return durationInSeconds;
    }

    private void botonDetenerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonDetenerActionPerformed
        if (this.zonaEscritorio.getSelectedFrame() instanceof VentanaInternaVideo) {
            VentanaInternaVideo vv = (VentanaInternaVideo) zonaEscritorio.getSelectedFrame();
            if (vv != null) {
                vv.stop();
            }
        }
        else if (player != null) {
            player.stop();
            player = null;
            segs = min = 0;
        }
    }//GEN-LAST:event_botonDetenerActionPerformed

    File f = null;
    
    private void botonGrabarAudioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGrabarAudioActionPerformed
        if (!recording) {
            f = new File("tmp.wav");
            try {
                recorder = new SMSoundRecorder(f);
                if (recorder != null) {
                    recorder.addLineListener(new ManejadorAudioGrabar());
                    recorder.record();
                }
            } catch (Exception ex) {
                System.err.println("Error al guardar sonido");
            }
        } else if (recorder != null) {
            recorder.stop();
            JFileChooser dlg = new JFileChooser();
            int resp = dlg.showSaveDialog(this);
            File f_new = new File(dlg.getSelectedFile().getAbsolutePath()) {
                @Override
                public String toString() {
                    return this.getName();
                }
            };
            if(f_new.exists()) 
                f_new.delete();
            if (resp == JFileChooser.APPROVE_OPTION) {
                boolean ok_rename = f.renameTo(f_new);
                if (ok_rename) {
                    listaReproduccionAudio.addItem(f_new);
                }
            }
            else if (resp == JFileChooser.CANCEL_OPTION) {
                boolean ok_del = f.delete();
            }
            f = null;
            etiquetaGrabacionAudio.setText("00:00");
        }
    }//GEN-LAST:event_botonGrabarAudioActionPerformed

    private void switchVolcadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_switchVolcadoActionPerformed
        VentanaInternaSM vi = (VentanaInternaSM) (zonaEscritorio.getSelectedFrame());
        if(vi instanceof VentanaInternaImagen) {
            if (switchVolcado.isSelected()) {
                ((VentanaInternaImagen) vi).getLienzo().realizarVolcado();
                imgFuente = vi.getImage(true);
            } else {
                imgFuente = vi.getImage(false);
            }
        }
    }//GEN-LAST:event_switchVolcadoActionPerformed

    private void opcionAutoTintadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionAutoTintadoActionPerformed
        VentanaInternaSM vi = (VentanaInternaSM) (zonaEscritorio.getSelectedFrame());
        if (vi instanceof VentanaInternaImagen) { 
            BufferedImage img = vi.getImage(false);
            if (img != null) {
                try {
                    TintadoAutoOp tintado = new TintadoAutoOp(((VentanaInternaImagen)vi).getLienzo().getColorBorde());
                    tintado.filter(img, img);
                    ((VentanaInternaImagen)vi).getLienzo().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println("Ha ocurrido al aplicar tintado");
                    JOptionPane.showMessageDialog(new JFrame(), "Error al aplicar tintado", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_opcionAutoTintadoActionPerformed

    private void opcionEnverdecerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionEnverdecerActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen) (zonaEscritorio.getSelectedFrame());
        switchVolcadoActionPerformed(null);
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImage();
            if (img != null) {
                try {
                    float[][] matriz = {{0.0F, 0.6F, 0.4F},
                        {0.0F, 1.0F, 0.0F},
                        {0.0F, 0.0F, 1.0F}};
                    BandCombineOp bcop = new BandCombineOp(matriz, null);
                    bcop.filter(img.getRaster(), img.getRaster());
                    vi.getLienzo().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println("Ha ocurrido un error al enverdecer con las bandas");
                    JOptionPane.showMessageDialog(new JFrame(), "Error al enverdecer usando bandas", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_opcionEnverdecerActionPerformed

    private void opcionUnicoVolcadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionUnicoVolcadoActionPerformed
        ((VentanaInternaImagen) this.zonaEscritorio.getSelectedFrame()).getLienzo().realizarVolcado();
    }//GEN-LAST:event_opcionUnicoVolcadoActionPerformed

    private void opcionAcercaDeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionAcercaDeActionPerformed
        JOptionPane.showMessageDialog(this,"Nombre del programa: SMMEditor \nVersion: 14.f \nAutor: José Alberto Gómez García");
    }//GEN-LAST:event_opcionAcercaDeActionPerformed

    private void botonWebcamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonWebcamActionPerformed
        VentanaInternaCamara vc = VentanaInternaCamara.getInstance();
        if(vc != null) {
            zonaEscritorio.add(vc);
            vc.setVisible(true);
        }
    }//GEN-LAST:event_botonWebcamActionPerformed

    private void botonCapturarFrameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCapturarFrameActionPerformed
        VentanaInternaSM ventana = (VentanaInternaSM) (zonaEscritorio.getSelectedFrame());
        if(ventana!=null){
            BufferedImage img = null;
            if(ventana instanceof VentanaInternaCamara || ventana instanceof VentanaInternaVideo) 
                img = ventana.getImage(false);
            if(img != null) {
                VentanaInternaImagen vi = new VentanaInternaImagen("Imagen capturada");
                vi.getLienzo().setImage(img);
                zonaEscritorio.add(vi);
                vi.setVisible(true);
            }
        }
    }//GEN-LAST:event_botonCapturarFrameActionPerformed

    private void sliderLookupPropioFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderLookupPropioFocusGained
        VentanaInternaSM vi = (VentanaInternaSM) (zonaEscritorio.getSelectedFrame());
        if (vi instanceof VentanaInternaImagen) {        
            switchVolcadoActionPerformed(null);
            ColorModel cm = vi.getImage(false).getColorModel();
            WritableRaster raster = vi.getImage(false).copyData(null);
            boolean alfaPre = vi.getImage(false).isAlphaPremultiplied();
            imgFuente = new BufferedImage(cm, raster, alfaPre, null);
        }
    }//GEN-LAST:event_sliderLookupPropioFocusGained

    private void sliderLookupPropioFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderLookupPropioFocusLost
        imgFuente = null;
        sliderLookupPropio.setValue(128);
    }//GEN-LAST:event_sliderLookupPropioFocusLost

    private void sliderLookupPropioStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderLookupPropioStateChanged
        LookupTable tabla = MiLookupOp.createLookupTablePropia(sliderLookupPropio.getValue());
        VentanaInternaSM vi = (VentanaInternaSM) (zonaEscritorio.getSelectedFrame());
        if (vi instanceof VentanaInternaImagen && imgFuente != null) {
            BufferedImage img = vi.getImage(false);
            try {
                LookupOp lop = new LookupOp(tabla, null);
                lop.filter(imgFuente, img);
                ((VentanaInternaImagen)vi).getLienzo().repaint();
            } catch (Exception ex) {
                System.err.println("Ha ocurrido un error con el deslizador del operador lookup propio");
                JOptionPane.showMessageDialog(new JFrame(), "Error en el deslizador del lookup propio", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_sliderLookupPropioStateChanged

    private void opcionLookupIluminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionLookupIluminarActionPerformed
        LookupTable tabla = LookupRetoP10();
        aplicarLookup(tabla);
    }//GEN-LAST:event_opcionLookupIluminarActionPerformed

    private BufferedImage getImageBand(BufferedImage img, int banda) {
        //Creamos el modelo de color de la nueva imagen basado en el espacio de grises del paquete proporcionado (sin corrección gamma)
        ColorSpace cs = new sm.image.color.GreyColorSpace();
        ComponentColorModel cm = new ComponentColorModel(cs, false, false, Transparency.OPAQUE, DataBuffer.TYPE_BYTE);
        //Creamos el nuevo raster a partir del raster de la imagen original
        int vband[] = {banda};
        WritableRaster bRaster = (WritableRaster) img.getRaster().createWritableChild(0, 0, img.getWidth(), img.getHeight(), 0, 0, vband);
        //Creamos una nueva imagen que contiene como raster el correspondiente a la banda
        return new BufferedImage(cm, bRaster, false, null);
    }

    private Kernel getKernel(int seleccion) {
        Kernel k = null;
        switch (seleccion) {
            case 0: //Emborronamiento medio
                k = KernelProducer.createKernel(KernelProducer.TYPE_MEDIA_3x3);
                break;
            case 1: //Emborronamiento binomial
                k = KernelProducer.createKernel(KernelProducer.TYPE_BINOMIAL_3x3);
                break;
            case 2: //Enfoque
                k = KernelProducer.createKernel(KernelProducer.TYPE_ENFOQUE_3x3);
                break;
            case 3: //Relieve
                k = KernelProducer.createKernel(KernelProducer.TYPE_RELIEVE_3x3);
                break;
            case 4: //Fronteras de Laplace
                k = KernelProducer.createKernel(KernelProducer.TYPE_LAPLACIANA_3x3);
                break;
            case 5: //Emborronamiento horizontal.
                float filtro[] = {0.2f, 0.2f, 0.2f, 0.2f, 0.2f};
                k = new Kernel(5, 1, filtro);
                break;
            case 6: //Emborronamiento diagonal (derecha-arriba -> izquierda-abajo)
                float filtro2[] = {1 / 3f, 0.0f, 0.0f,
                    0.0f, 1 / 3f, 0.0f,
                    0.0f, 0.0f, 1 / 3f};
                k = new Kernel(3, 3, filtro2);
                break;
            case 7: //Filtro gaussiano
                float filtro3[] = {1f / 273, 4f / 273, 7f / 273, 4f / 273, 1f / 273,
                    4f / 273, 16f / 273, 26f / 273, 16f / 273, 4f / 273,
                    7f / 273, 26f / 273, 41f / 273, 26f / 273, 7f / 273,
                    4f / 273, 16f / 273, 26f / 273, 16f / 273, 4f / 273,
                    1f / 273, 4f / 273, 7f / 273, 4f / 273, 1f / 273};
                k = new Kernel(5, 5, filtro3);
                break;

            case 8: //Mi intento de filtro. Una especie de inversa del gaussiano
                float filtro4[] = {12f / 145, 6f / 145, 6f / 145, 6f / 145, 12f / 145,
                    6f / 145, 4f / 145, 2f / 145, 4f / 145, 6f / 145,
                    6f / 145, 2f / 145, 1f / 145, 2f / 145, 6f / 145,
                    6f / 145, 4f / 145, 2f / 145, 4f / 145, 6f / 145,
                    12f / 145, 6f / 145, 6f / 145, 6f / 145, 12f / 145};
                k = new Kernel(5, 5, filtro4);
                break;
        }
        return k;
    }

    private class ManejadorVentanaInterna extends javax.swing.event.InternalFrameAdapter {

        @Override
        public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            VentanaInternaImagen vi = (VentanaInternaImagen) evt.getInternalFrame();
            switch (vi.getLienzo().getHerramienta()) {
                case LINEA:
                    switchLinea.setSelected(true);
                    barraEstado.setText("Dibujando: línea");
                    break;
                case RECTANGULO:
                    switchRectangulo.setSelected(true);
                    barraEstado.setText("Dibujando: rectangulo");

                    break;
                case ELIPSE:
                    switchElipse.setSelected(true);
                    barraEstado.setText("Dibujando: elipse");

                    break;
                case CURVA:
                    switchCurva.setSelected(true);
                    barraEstado.setText("Dibujando: curva de un punto de control");

                    break;
                case LAPIZ:
                    switchLapiz.setSelected(true);
                    barraEstado.setText("Dibujando: libre");

                    break;
            }
            switchRelleno.setSelected(vi.getLienzo().getRellenoColor());
            switchDegradado.setSelected(vi.getLienzo().getEstoyDegradado());
            spinnerGrosor.setValue(vi.getLienzo().getStroke());
            switchTransparencia.setSelected(vi.getLienzo().getTransparencia());
            switchAlisar.setSelected(vi.getLienzo().getAlisado());
            switchEdicion.setSelected(vi.getLienzo().getEditarFiguras());
            switchDiscontinuidad.setSelected(vi.getLienzo().getEstoyDiscontinuo());
            comboboxColorBorde.setSelectedItem(vi.getLienzo().getColorBorde());
            comboboxColorRelleno.setSelectedItem(vi.getLienzo().getColorRelleno());
            switchEfectoVentana.setSelected(vi.getLienzo().getEfectoVentana());
            sliderTransparencia.setValue(50);
        }
    }
    
    private class ManejadorVentanaInternaVideo extends javax.swing.event.InternalFrameAdapter {
        @Override
        public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt){
            botonGrabarAudio.setEnabled(true);
            botonDetener.setEnabled(true);
            botonReproducir.setEnabled(true);        
        }
    }

    private class ManejadorLienzo implements LienzoListener {

        @Override
        public void selectedShape(LienzoEvent evt) {
            barraEstado.setText("Figura seleccionada: " + evt.getFiguraSeleccionada());
            MisAtributosBorde mb = evt.getMisAtributosBorde();
            MisAtributosRelleno mr = evt.getMisAtributosRelleno();
            MisOtrosAtributos mo = evt.getMisOtrosAtributos();
            Lienzo2D lienzo = ((VentanaInternaImagen) zonaEscritorio.getSelectedFrame()).getLienzo();
            comboboxColorBorde.setSelectedItem(mb.getColorBorde());
            lienzo.setColorBorde(mb.getColorBorde());
            spinnerGrosor.setValue(mb.getGrosor());
            lienzo.setStroke(mb.getGrosor());
            switchTransparencia.setSelected(mo.getEstoyTransparente());
            lienzo.setTransparencia(mo.getEstoyTransparente());
            switchAlisar.setSelected(mo.getEstoyAlisado());
            lienzo.setAlisado(mo.getEstoyAlisado());
            switchDiscontinuidad.setSelected(mb.getEstoyDiscontinuo());
            lienzo.setEstoyDiscontinuo(mb.getEstoyDiscontinuo());
            if (evt.getTipoFigura() == 1)  {
                switchRelleno.setSelected(mr.getEstoyRelleno());
                lienzo.setRellenoColor(mr.getEstoyRelleno());
                switchDegradado.setSelected(mr.getDegradado());
                lienzo.setDegradado(mr.getDegradado());
                comboboxDegradado.setSelectedIndex(mr.getOpcionRelleno());
                lienzo.setOpcionDegradado(mr.getOpcionRelleno());
                comboboxColorRelleno.setSelectedItem(mr.getColorRelleno()); 
                lienzo.setColorRelleno(mr.getColorRelleno());
            } else {
                //Las figuras sin relleno lo lógico es que tengan todo esto desactivado
                switchRelleno.setSelected(false);
                lienzo.setRellenoColor(false);
                switchDegradado.setSelected(false);
                lienzo.setDegradado(false);
                comboboxDegradado.setSelectedIndex(0);
                lienzo.setOpcionDegradado(0);
                comboboxColorRelleno.setSelectedItem(Color.BLACK);
                lienzo.setColorRelleno(Color.BLACK);

            }
        }        
    }
    
    private class ManejadorRaton extends java.awt.event.MouseMotionAdapter {

        @Override
        public void mouseMoved(java.awt.event.MouseEvent evt) {
            VentanaInternaImagen vi = (VentanaInternaImagen) zonaEscritorio.getSelectedFrame();
            Point coordenadas = evt.getPoint();
            try {
                int pixel = vi.getLienzo().getImage().getRGB(coordenadas.x, coordenadas.y);
                Color color = new Color(pixel, true);
                int red = color.getRed();
                int green = color.getGreen();
                int blue = color.getBlue();
                barraCoordenadas.setText("(" + coordenadas.x + "," + coordenadas.y + ") -> (" + red + "," + green + "," + blue + ")");
            } catch (Exception ex) {
                barraCoordenadas.setText("(" + coordenadas.x + "," + coordenadas.y + ")");
            }
        }
    }

    int segs = 0, min = 0; //Espero ningun audio llegue a una hora

    class ManejadorAudioReproducir implements LineListener {

        @Override
        public void update(LineEvent event) {
            if (event.getType() == LineEvent.Type.START) {
                etiquetaGrabacionAudio.setText("00:00");
                playing = true;
                Thread t = new Thread() {
                    @Override
                    public void run() {
                        for (;;) {
                            if (playing) {
                                try {
                                    if (segs > 59) {
                                        segs = 0;
                                        min++;
                                    }
                                    sleep(1000); //Mide en milisegundos
                                    formatEtiquetasTiempos(segs, min, etiquetaDuracionAudio);
                                    segs++;
                                } catch (Exception ex) {
                                    System.err.println(ex);
                                }
                            }
                        }
                    }
                };
                t.start();
                botonGrabarAudio.setEnabled(false); //Parece lógico que mientras reproduzco no pueda grabar   
                botonReproducir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/pausa24x24.png")));

            }
            if (event.getType() == LineEvent.Type.STOP) {
                botonGrabarAudio.setEnabled(true);
                playing = false;
                botonReproducir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/play24x24.png")));

            }
            if (event.getType() == LineEvent.Type.CLOSE) {
                segs = min = 0;
            }
        }
    }
    
    int segs_r = 0, min_r = 0; //Espero ningun audio llegue a una hora

    class ManejadorAudioGrabar implements LineListener {

        @Override
        public void update(LineEvent event) {
            if (event.getType() == LineEvent.Type.START) {
                etiquetaDuracionAudio.setText("00:00");
                recording = true;
                Thread t = new Thread() {
                    @Override
                    public void run() {
                        for (;;) {
                            if (recording) {
                                try {
                                    if (segs_r > 59) {
                                        segs_r = 0;
                                        min_r++;
                                    }
                                    sleep(1000); //Mide en milisegundos
                                    formatEtiquetasTiempos(segs_r, min_r, etiquetaGrabacionAudio);
                                    segs_r++;
                                } catch (Exception ex) {
                                    System.err.println(ex);
                                }
                            }
                        }
                    }
                };
                t.start();
                botonReproducir.setEnabled(false); //Parece lógico que mientras grabe no pueda reproducir ni parar algo que no
                botonDetener.setEnabled(false);
                botonGrabarAudio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/stopRecord24x24.png")));

            }
            if (event.getType() == LineEvent.Type.STOP) {
                botonReproducir.setEnabled(true);
                botonDetener.setEnabled(true);
                recording = false;
                botonGrabarAudio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/record24x24.png")));
            }
            if (event.getType() == LineEvent.Type.CLOSE) {
                segs_r = min_r = 0;
            }
        }
    }
    private boolean playing = false, recording = false;

    class ManejadorVideo extends MediaPlayerEventAdapter {
        
        @Override
        public void playing(MediaPlayer mediaPlayer){
            botonGrabarAudio.setEnabled(false);
            botonDetener.setEnabled(true);
            botonReproducir.setEnabled(false);
        }
        
        @Override
        public void paused(MediaPlayer mediaPlayer){
            botonGrabarAudio.setEnabled(true);
            botonDetener.setEnabled(false);
            botonReproducir.setEnabled(true);
        }
        
        @Override
        public void finished(MediaPlayer mediaPlayer){
            this.paused(mediaPlayer);
            botonGrabarAudio.setEnabled(true);
            botonDetener.setEnabled(true);
            botonReproducir.setEnabled(true);
        }
    }
    
    private void formatEtiquetasTiempos(int segs, int min, JLabel etiqueta) {
        if (segs < 10 && min < 10) {
            etiqueta.setText("0" + min + ":0" + segs);
        } else if (segs < 10) {
            etiqueta.setText(min + ":0" + segs);
        } else if (min < 10) {
            etiqueta.setText("0" + min + ":" + segs);
        } else {
            etiqueta.setText(min + ":" + segs);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel barraCoordenadas;
    private javax.swing.JLabel barraEstado;
    private javax.swing.JToolBar barraHerramientas;
    private javax.swing.JToolBar barraHerramientasInferior;
    private javax.swing.JMenuBar barraSuperior;
    private javax.swing.JButton boton180grados;
    private javax.swing.JButton boton270grados;
    private javax.swing.JButton boton90grados;
    private javax.swing.JButton botonAbrir;
    private javax.swing.JButton botonBandas;
    private javax.swing.JButton botonCapturarFrame;
    private javax.swing.JButton botonContrasteIluminar;
    private javax.swing.JButton botonContrasteNormal;
    private javax.swing.JButton botonContrasteOscurecido;
    private javax.swing.JButton botonDetener;
    private javax.swing.JButton botonEcualizar;
    private javax.swing.JButton botonExtraerBandas;
    private javax.swing.JButton botonGrabarAudio;
    private javax.swing.JButton botonGuardar;
    private javax.swing.JButton botonNegativo;
    private javax.swing.JButton botonNuevo;
    private javax.swing.JButton botonReproducir;
    private javax.swing.JButton botonSepia;
    private javax.swing.JButton botonWebcam;
    private javax.swing.JButton botonZoomIN;
    private javax.swing.JButton botonZoomOUT;
    private javax.swing.JCheckBoxMenuItem checkboxBarraEstado;
    private javax.swing.JComboBox<Color> comboboxColorBorde;
    private javax.swing.JComboBox<Color> comboboxColorRelleno;
    private javax.swing.JComboBox<String> comboboxDegradado;
    private javax.swing.JComboBox<String> comboboxEspaciosColor;
    private javax.swing.JComboBox<String> comboboxFiltros;
    private javax.swing.JLabel etiquetaDe;
    private javax.swing.JLabel etiquetaDuracionAudio;
    private javax.swing.JLabel etiquetaDuracionTotalAudio;
    private javax.swing.JLabel etiquetaGrabacionAudio;
    private javax.swing.ButtonGroup grupoHerramientasDibujo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator10;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JToolBar.Separator jSeparator4;
    private javax.swing.JToolBar.Separator jSeparator5;
    private javax.swing.JToolBar.Separator jSeparator6;
    private javax.swing.JToolBar.Separator jSeparator7;
    private javax.swing.JToolBar.Separator jSeparator8;
    private javax.swing.JToolBar.Separator jSeparator9;
    private javax.swing.JComboBox<File> listaReproduccionAudio;
    private javax.swing.JMenu menuArchivo;
    private javax.swing.JMenu menuAyuda;
    private javax.swing.JMenu menuImagen;
    private javax.swing.JMenuItem opcionAbrir;
    private javax.swing.JMenuItem opcionAcercaDe;
    private javax.swing.JMenuItem opcionAutoTintado;
    private javax.swing.JMenuItem opcionDuplicar;
    private javax.swing.JMenuItem opcionEnverdecer;
    private javax.swing.JMenuItem opcionFichero;
    private javax.swing.JMenuItem opcionGuardar;
    private javax.swing.JMenuItem opcionImpresora;
    private javax.swing.JMenuItem opcionLookupIluminar;
    private javax.swing.JMenuItem opcionNuevo;
    private javax.swing.JMenuItem opcionSalir;
    private javax.swing.JMenuItem opcionUnicoVolcado;
    private javax.swing.JPanel panelBarraEstadoCoordenadas;
    private javax.swing.JPanel panelBarraHerramientasInferior;
    private javax.swing.JPanel panelCentral;
    private javax.swing.JPanel panelHerramientasSuperior;
    private javax.swing.JPanel panelInferior;
    private javax.swing.JButton selectorColoresBorde;
    private javax.swing.JButton selectorColoresRelleno;
    private javax.swing.JPopupMenu.Separator separador2SubmenuArchivo;
    private javax.swing.JPopupMenu.Separator separadorSubmenuArchivo;
    private javax.swing.JSlider sliderBrillo;
    private javax.swing.JSlider sliderCuadratica;
    private javax.swing.JSlider sliderLookupPropio;
    private javax.swing.JSlider sliderPosterizar;
    private javax.swing.JSlider sliderPsicodelico;
    private javax.swing.JSlider sliderRojos;
    private javax.swing.JSlider sliderRotacion;
    private javax.swing.JSlider sliderTintado;
    private javax.swing.JSlider sliderTransparencia;
    private javax.swing.JSpinner spinnerGrosor;
    private javax.swing.JMenu submenuImprimir;
    private javax.swing.JMenu submenuVer;
    private javax.swing.JToggleButton switchAlisar;
    private javax.swing.JToggleButton switchCurva;
    private javax.swing.JToggleButton switchDegradado;
    private javax.swing.JToggleButton switchDiscontinuidad;
    private javax.swing.JToggleButton switchEdicion;
    private javax.swing.JToggleButton switchEfectoVentana;
    private javax.swing.JToggleButton switchElipse;
    private javax.swing.JToggleButton switchLapiz;
    private javax.swing.JToggleButton switchLinea;
    private javax.swing.JToggleButton switchRectangulo;
    private javax.swing.JToggleButton switchRelleno;
    private javax.swing.JToggleButton switchTransparencia;
    private javax.swing.JToggleButton switchVolcado;
    private javax.swing.JDesktopPane zonaEscritorio;
    // End of variables declaration//GEN-END:variables
}
